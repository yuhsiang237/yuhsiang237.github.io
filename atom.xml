<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>UM&#39;s Coding Note</title>
  
  <subtitle>I record my coding experience at this place🤙</subtitle>
  <link href="https://yuhsiang237.github.io/atom.xml" rel="self"/>
  
  <link href="https://yuhsiang237.github.io/"/>
  <updated>2025-08-14T10:16:01.193Z</updated>
  <id>https://yuhsiang237.github.io/</id>
  
  <author>
    <name>Yu Hsiang</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>[Day04] Typescript 呼叫API整理</title>
    <link href="https://yuhsiang237.github.io/2025/08/14/Typescript-Day04/"/>
    <id>https://yuhsiang237.github.io/2025/08/14/Typescript-Day04/</id>
    <published>2025-08-14T13:17:12.000Z</published>
    <updated>2025-08-14T10:16:01.193Z</updated>
    
    <content type="html"><![CDATA[<p>這回來是API呼叫方式<br>常見的API在大型專案中都是會先封裝好，再透過API網址去呼叫。</p><p>主要使用axios，因為可以控制版本，相對於原生的fetch而言。</p><p>該份API呼叫範例程式碼優點：<br>1.集中管理 API 主機 URL<br>2.呼叫端程式碼更乾淨<br>3.易於維護和擴展<br>4.支援多環境<br>5.安全性<br>6.未來擴充方便</p><p>「配置集中化 + 呼叫簡潔化 + 易維護 + 安全 + 支援多環境」</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># API呼叫</span></span><br><span class="line">npm install axios</span><br><span class="line">npm install --save-dev @types/axios</span><br><span class="line"><span class="comment"># API環境檔案</span></span><br><span class="line">npm install dotenv</span><br></pre></td></tr></table></figure><p>首先環境檔案</p><p>.env</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">API_BASE_URL=https://jsonplaceholder.typicode.com</span><br><span class="line">API_USERS_PATH=/users</span><br><span class="line">API_POSTS_PATH=/posts</span><br><span class="line">API_COMMENTS_PATH=/comments</span><br></pre></td></tr></table></figure><p>HttpClient.ts<br>把 GET 和 POST 都包成 HttpClient 的方法，並保留 TypeScript 泛型支援</p><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// HttpClient.ts</span></span><br><span class="line"><span class="keyword">import</span> axios, &#123; AxiosInstance, AxiosRequestConfig, AxiosResponse &#125; <span class="keyword">from</span> <span class="string">&#x27;axios&#x27;</span>;</span><br><span class="line"><span class="keyword">import</span> dotenv <span class="keyword">from</span> <span class="string">&#x27;dotenv&#x27;</span>;</span><br><span class="line"></span><br><span class="line">dotenv.config(); <span class="comment">// 讀取 .env</span></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">HttpClient</span> </span>&#123;</span><br><span class="line">  <span class="keyword">private</span> client: AxiosInstance;</span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="title">constructor</span>(<span class="params"></span>)</span> &#123;</span><br><span class="line">    <span class="keyword">const</span> baseURL = process.env.API_BASE_URL || <span class="string">&#x27;&#x27;</span>;</span><br><span class="line">    <span class="built_in">this</span>.client = axios.create(&#123;</span><br><span class="line">      baseURL,</span><br><span class="line">      <span class="attr">timeout</span>: <span class="number">5000</span>,</span><br><span class="line">      <span class="attr">headers</span>: &#123; <span class="string">&#x27;Content-Type&#x27;</span>: <span class="string">&#x27;application/json&#x27;</span> &#125;,</span><br><span class="line">    &#125;);</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">public</span> <span class="keyword">async</span> getData&lt;T&gt;(url: <span class="built_in">string</span>, config?: AxiosRequestConfig): <span class="built_in">Promise</span>&lt;T&gt; &#123;</span><br><span class="line">    <span class="keyword">const</span> response: AxiosResponse&lt;T&gt; = <span class="keyword">await</span> <span class="built_in">this</span>.client.get&lt;T&gt;(url, config);</span><br><span class="line">    <span class="keyword">return</span> response.data;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">public</span> <span class="keyword">async</span> postData&lt;T&gt;(url: <span class="built_in">string</span>, data?: <span class="built_in">any</span>, config?: AxiosRequestConfig): <span class="built_in">Promise</span>&lt;T&gt; &#123;</span><br><span class="line">    <span class="keyword">const</span> response: AxiosResponse&lt;T&gt; = <span class="keyword">await</span> <span class="built_in">this</span>.client.post&lt;T&gt;(url, data, config);</span><br><span class="line">    <span class="keyword">return</span> response.data;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> HttpClient;</span><br></pre></td></tr></table></figure><p>型別定義</p><p>type.ts</p><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// types.ts</span></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">interface</span> User &#123;</span><br><span class="line">  <span class="attr">id</span>: <span class="built_in">number</span>;</span><br><span class="line">  name: <span class="built_in">string</span>;</span><br><span class="line">  email: <span class="built_in">string</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">interface</span> CreateUserRequest &#123;</span><br><span class="line">  <span class="attr">name</span>: <span class="built_in">string</span>;</span><br><span class="line">  email: <span class="built_in">string</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>呼叫範例:<br>main.ts</p><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// main.ts</span></span><br><span class="line"><span class="keyword">import</span> dotenv <span class="keyword">from</span> <span class="string">&#x27;dotenv&#x27;</span>;</span><br><span class="line">dotenv.config(); <span class="comment">// 讀取 .env</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> HttpClient <span class="keyword">from</span> <span class="string">&#x27;./HttpClient&#x27;</span>;</span><br><span class="line"><span class="keyword">import</span> &#123; User, CreateUserRequest &#125; <span class="keyword">from</span> <span class="string">&#x27;./types&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> api = <span class="keyword">new</span> HttpClient(); <span class="comment">// 不用傳 baseURL，已經在 HttpClient 裡讀取</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">async</span> <span class="function"><span class="keyword">function</span> <span class="title">run</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="comment">// GET 所有使用者</span></span><br><span class="line">  <span class="keyword">const</span> users: User[] = <span class="keyword">await</span> api.getData&lt;User[]&gt;(process.env.API_USERS_PATH || <span class="string">&#x27;/users&#x27;</span>);</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">&#x27;Users:&#x27;</span>, users);</span><br><span class="line"></span><br><span class="line">  <span class="comment">// GET 單一使用者</span></span><br><span class="line">  <span class="keyword">const</span> user: User = <span class="keyword">await</span> api.getData&lt;User&gt;(<span class="string">`<span class="subst">$&#123;process.env.API_USERS_PATH&#125;</span>/1`</span>);</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">&#x27;User 1:&#x27;</span>, user);</span><br><span class="line"></span><br><span class="line">  <span class="comment">// POST 新使用者</span></span><br><span class="line">  <span class="keyword">const</span> newUserData: CreateUserRequest = &#123; <span class="attr">name</span>: <span class="string">&#x27;John Doe&#x27;</span>, <span class="attr">email</span>: <span class="string">&#x27;john@example.com&#x27;</span> &#125;;</span><br><span class="line">  <span class="keyword">const</span> newUser: User = <span class="keyword">await</span> api.postData&lt;User&gt;(process.env.API_USERS_PATH || <span class="string">&#x27;/users&#x27;</span>, newUserData);</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">&#x27;New User:&#x27;</span>, newUser);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">run();</span><br></pre></td></tr></table></figure><p>總結：<br>HttpClient 自動抓 .env 的 API_BASE_URL，呼叫時不用再傳。<br>.env 仍然可以管理不同環境的 URL 與 API 路徑。<br>main.ts 只要 import HttpClient + 用 .env 定義的路徑即可。</p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;這回來是API呼叫方式&lt;br&gt;常見的API在大型專案中都是會先封裝好，再透過API網址去呼叫。&lt;/p&gt;
&lt;p&gt;主要使用axios，因為可以控制版本，相對於原生的fetch而言。&lt;/p&gt;
&lt;p&gt;該份API呼叫範例程式碼優點：&lt;br&gt;1.集中管理 API 主機 URL&lt;br&gt;2</summary>
      
    
    
    
    <category term="Code" scheme="https://yuhsiang237.github.io/categories/Code/"/>
    
    <category term="Topic" scheme="https://yuhsiang237.github.io/categories/Topic/"/>
    
    <category term="Javascript" scheme="https://yuhsiang237.github.io/categories/Code/Javascript/"/>
    
    <category term="2025 Typescript" scheme="https://yuhsiang237.github.io/categories/Topic/2025-Typescript/"/>
    
    <category term="Typescript" scheme="https://yuhsiang237.github.io/categories/Code/Typescript/"/>
    
    
  </entry>
  
  <entry>
    <title>[Day03] Typescript面試選擇30題</title>
    <link href="https://yuhsiang237.github.io/2025/08/13/Typescript-Day03/"/>
    <id>https://yuhsiang237.github.io/2025/08/13/Typescript-Day03/</id>
    <published>2025-08-13T13:17:12.000Z</published>
    <updated>2025-08-13T05:16:45.379Z</updated>
    
    <content type="html"><![CDATA[<p>來到第三天，這回用AI生成了常見的Typescript面試選擇題。<br>一共30題，現在使用AI確實比過往一個一個爬stackoverflow好很多了。</p><p>涵蓋基礎、進階、型別系統與實務應用</p><hr><h2 id="TypeScript-面試選擇題（共-30-題）"><a href="#TypeScript-面試選擇題（共-30-題）" class="headerlink" title="TypeScript 面試選擇題（共 30 題）"></a><strong>TypeScript 面試選擇題（共 30 題）</strong></h2><h3 id="基礎語法與型別"><a href="#基礎語法與型別" class="headerlink" title="基礎語法與型別"></a><strong>基礎語法與型別</strong></h3><ol><li><p><strong>以下哪一個是正確的 TypeScript 型別宣告？</strong><br>A. <code>let age: number = &#39;25&#39;;</code><br>B. <code>let age: string = 25;</code><br>C. <code>let age: number = 25;</code> ✅<br>D. <code>let age: any = 25;</code> </p><p><strong>解析</strong>：<code>number</code> 不能賦值為字串，C 正確。D:（語法正確，但不建議） 型別標註 any，可以接受任何型別，但失去型別檢查的優勢。很多 TypeScript 規範會禁止 any</p></li></ol><hr><ol start="2"><li><p><strong><code>unknown</code> 型別的特性是什麼？</strong><br>A. 可以直接做任何運算<br>B. 必須先進行型別檢查後才能使用 ✅<br>C. 與 <code>any</code> 完全相同<br>D. 只能賦值為 <code>null</code></p><p><strong>解析</strong>：<code>unknown</code> 比 <code>any</code> 更安全，需要型別收窄後才能操作。<br> unknown = “我不知道它是什麼型別，所以你得先確認再用”<br> any = “我懶得檢查，全部放行”</p></li></ol><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">    <span class="keyword">let</span> u: unknown = <span class="string">&quot;Hello&quot;</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 錯誤：不能直接調用方法</span></span><br><span class="line"><span class="comment">// console.log(u.toUpperCase()); ❌</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 必須檢查型別</span></span><br><span class="line"><span class="keyword">if</span> (<span class="keyword">typeof</span> u === <span class="string">&quot;string&quot;</span>) &#123;</span><br><span class="line">  <span class="built_in">console</span>.log(u.toUpperCase()); <span class="comment">// ✅</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 或使用型別斷言</span></span><br><span class="line"><span class="built_in">console</span>.log((u <span class="keyword">as</span> <span class="built_in">string</span>).toUpperCase()); <span class="comment">// ✅</span></span><br></pre></td></tr></table></figure><hr><ol start="3"><li><p><strong>哪一個關鍵字用來定義常數 enum？</strong><br>A. <code>enum</code><br>B. <code>const enum</code> ✅<br>C. <code>static enum</code><br>D. <code>readonly enum</code></p><p><strong>解析</strong>：<code>const enum</code> 在編譯時會被內聯，效能更好。</p></li></ol><hr><ol start="4"><li><p><strong>下面哪種是交叉型別（Intersection Types）的正確語法？</strong><br>A. <code>type Person = &#123; name: string &#125; &amp;&amp; &#123; age: number &#125;;</code><br>B. <code>type Person = &#123; name: string &#125; | &#123; age: number &#125;;</code><br>C. <code>type Person = &#123; name: string &#125; &amp; &#123; age: number &#125;;</code> ✅<br>D. <code>type Person = &#123; name: string, age: number &#125;;</code></p><p><strong>解析</strong>：交叉型別用 <code>&amp;</code>，代表合併兩個型別。</p></li></ol><hr><ol start="5"><li><strong>下列哪個是泛型函式的正確定義？</strong><br>A. <code>function identity&lt;T&gt;(arg: T): T &#123; return arg; &#125;</code> ✅<br>B. <code>function identity(arg: T): T &#123; return arg; &#125;</code><br>C. <code>function identity&lt;T&gt;(T arg) &#123; return arg; &#125;</code><br>D. <code>function identity(arg) &#123; return arg; &#125;</code></li></ol><hr><h3 id="進階型別系統"><a href="#進階型別系統" class="headerlink" title="進階型別系統"></a><strong>進階型別系統</strong></h3><ol start="6"><li><strong><code>Partial&lt;T&gt;</code> 工具型別的功能是什麼？</strong><br>A. 把 T 所有屬性變成必填<br>B. 把 T 所有屬性變成可選 ✅<br>C. 移除 T 的所有屬性<br>D. 把 T 轉換成陣列</li></ol><hr><ol start="7"><li><strong>下列哪一個是索引型別查詢的正確用法？</strong><br>A. <code>type Keys = keyof Person;</code> ✅<br>B. <code>type Keys = valueof Person;</code><br>C. <code>type Keys = indexof Person;</code><br>D. <code>type Keys = typeof Person;</code></li></ol><p>等同於</p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">type</span> Keys = keyof Person;</span><br><span class="line"><span class="comment">// 等同於：type Keys = &quot;name&quot; | &quot;age&quot; | &quot;address&quot;</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><hr><ol start="8"><li><strong><code>never</code> 型別的用途是什麼？</strong><br>A. 表示一個函式永遠不會回傳 ✅<br>B. 表示一個變數可以是任何型別<br>C. 表示一個變數為空<br>D. 表示一個變數尚未初始化</li></ol><hr><ol start="9"><li><strong>下列哪個範例正確使用 <code>as const</code>？</strong><br>A. <code>const arr = [1, 2, 3] as const;</code> ✅<br>B. <code>let arr = [1, 2, 3] as const;</code><br>C. <code>const arr as const = [1, 2, 3];</code><br>D. <code>const arr = as const [1, 2, 3];</code></li></ol><p>as const 的作用是把一個值斷言為最窄的型別（literal type），而且會把它變成 readonly。<br>元素型別不再是 number，而是字面值型別 → 第一個元素就是 1、第二個是 2、第三個是 3</p><p>陣列變成唯讀（readonly） → 不能改值或 push</p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">arr[<span class="number">0</span>] = <span class="number">99</span>; <span class="comment">// ❌ 錯誤：Cannot assign to &#x27;0&#x27; because it is a read-only property</span></span><br><span class="line">arr.push(<span class="number">4</span>); <span class="comment">// ❌ 錯誤：Property &#x27;push&#x27; does not exist on type &#x27;readonly [1, 2, 3]&#x27;</span></span><br></pre></td></tr></table></figure><hr><ol start="10"><li><strong>哪一種方式可以防止物件被修改？</strong><br>A. <code>readonly</code> ✅<br>B. <code>private</code><br>C. <code>const</code><br>D. <code>static</code></li></ol><p>const → 只能防止變數的重新指派，但物件內容還是可以改：</p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> obj = &#123; <span class="attr">name</span>: <span class="string">&quot;Tom&quot;</span> &#125;;</span><br><span class="line">obj.name = <span class="string">&quot;Jerry&quot;</span>; <span class="comment">// ✅ 可以改</span></span><br></pre></td></tr></table></figure><p>readonly 可用在物件屬性上（interface 或 type）、類別屬性上</p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">interface</span> User &#123;</span><br><span class="line">  <span class="keyword">readonly</span> id: <span class="built_in">number</span>;</span><br><span class="line">  name: <span class="built_in">string</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> user: User = &#123; <span class="attr">id</span>: <span class="number">1</span>, <span class="attr">name</span>: <span class="string">&quot;Alice&quot;</span> &#125;;</span><br><span class="line">user.id = <span class="number">2</span>; <span class="comment">// ❌ 錯誤，readonly 屬性不能改</span></span><br><span class="line">user.name = <span class="string">&quot;Bob&quot;</span>; <span class="comment">// ✅ 可以改</span></span><br></pre></td></tr></table></figure><hr><h3 id="函式與-OOP"><a href="#函式與-OOP" class="headerlink" title="函式與 OOP"></a><strong>函式與 OOP</strong></h3><ol start="11"><li><strong>TypeScript 中，介面（interface）可以</strong><br>A. 只用來定義物件形狀 ✅<br>B. 被類別實作 ✅<br>C. 被擴展（extend） ✅<br>D. 以上皆是 ✅</li></ol><hr><ol start="12"><li><strong>函式的可選參數應該放在</strong><br>A. 最前面<br>B. 中間<br>C. 最後面 ✅<br>D. 任意位置</li></ol><p>最後面</p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 正確範例：可選參數放最後面</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">greet</span>(<span class="params">name: <span class="built_in">string</span>, age?: <span class="built_in">number</span></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">if</span> (age !== <span class="literal">undefined</span>) &#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">`Hello <span class="subst">$&#123;name&#125;</span>, you are <span class="subst">$&#123;age&#125;</span> years old.`</span>);</span><br><span class="line">  &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">`Hello <span class="subst">$&#123;name&#125;</span>`</span>);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">greet(<span class="string">&quot;Alice&quot;</span>);         <span class="comment">// OK</span></span><br><span class="line">greet(<span class="string">&quot;Bob&quot;</span>, <span class="number">30</span>);       <span class="comment">// OK</span></span><br></pre></td></tr></table></figure><hr><ol start="13"><li><p><strong>下列哪個範例正確定義函式多載（Overload）？</strong><br>A.✅</p><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">add</span>(<span class="params">a: <span class="built_in">number</span>, b: <span class="built_in">number</span></span>): <span class="title">number</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">add</span>(<span class="params">a: <span class="built_in">string</span>, b: <span class="built_in">string</span></span>): <span class="title">string</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">add</span>(<span class="params">a: <span class="built_in">any</span>, b: <span class="built_in">any</span></span>) </span>&#123; <span class="keyword">return</span> a + b; &#125;</span><br></pre></td></tr></table></figure><p>B.  </p><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">add</span>(<span class="params">a, b</span>) </span>&#123; <span class="keyword">return</span> a + b; &#125;</span><br></pre></td></tr></table></figure><p>C.</p><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">add</span>(<span class="params">a: <span class="built_in">number</span> | <span class="built_in">string</span>, b: <span class="built_in">number</span> | <span class="built_in">string</span></span>) </span>&#123; <span class="keyword">return</span> a + b; &#125;</span><br></pre></td></tr></table></figure><p>D. 以上皆非</p></li></ol><p>函式多載（Function Overloading）是指在同一個函式名稱底下，定義多種不同的參數型態與數量，讓函式能根據呼叫時傳入的參數型別或數量，執行不同的邏輯或回傳不同型別的結果。</p><hr><ol start="14"><li><strong><code>abstract</code> 關鍵字的用途是什麼？</strong><br>A. 定義不能被實例化的類別 ✅<br>B. 定義常數<br>C. 定義不可修改的變數<br>D. 定義泛型</li></ol><hr><ol start="15"><li><strong>以下哪個是介面擴展的正確方式？</strong><br>A. <code>interface B extends A &#123;&#125;</code> ✅<br>B. <code>interface B implements A &#123;&#125;</code><br>C. <code>class B extends A &#123;&#125;</code><br>D. <code>type B = A extends &#123;&#125;</code></li></ol><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 先定義介面 A</span></span><br><span class="line"><span class="keyword">interface</span> A &#123;</span><br><span class="line">  <span class="attr">name</span>: <span class="built_in">string</span>;</span><br><span class="line">  age: <span class="built_in">number</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// B 繼承 A，新增一個屬性 job</span></span><br><span class="line"><span class="keyword">interface</span> B <span class="keyword">extends</span> A &#123;</span><br><span class="line">  <span class="attr">job</span>: <span class="built_in">string</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 使用範例</span></span><br><span class="line"><span class="keyword">const</span> person: B = &#123;</span><br><span class="line">  <span class="attr">name</span>: <span class="string">&quot;Alice&quot;</span>,</span><br><span class="line">  <span class="attr">age</span>: <span class="number">30</span>,</span><br><span class="line">  <span class="attr">job</span>: <span class="string">&quot;Engineer&quot;</span>,</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(person.name); <span class="comment">// Alice</span></span><br><span class="line"><span class="built_in">console</span>.log(person.job);  <span class="comment">// Engineer</span></span><br></pre></td></tr></table></figure><hr><h3 id="實務應用與錯誤檢查"><a href="#實務應用與錯誤檢查" class="headerlink" title="實務應用與錯誤檢查"></a><strong>實務應用與錯誤檢查</strong></h3><ol start="16"><li><strong>TypeScript 中 <code>strictNullChecks</code> 開啟後會</strong><br>A. 禁止變數為 <code>null</code> 或 <code>undefined</code> 除非型別允許 ✅<br>B. 自動轉換 <code>null</code> 為空字串<br>C. 忽略 <code>null</code><br>D. 允許任何型別</li></ol><hr><ol start="17"><li><strong><code>tsconfig.json</code> 中 <code>noImplicitAny</code> 的作用是</strong><br>A. 允許隱含 <code>any</code><br>B. 禁止隱含 <code>any</code> ✅<br>C. 自動推斷 <code>any</code><br>D. 強制使用 <code>unknown</code></li></ol><hr><ol start="18"><li><strong>下列哪一種是型別守衛（Type Guard）？</strong><br>A. <code>typeof value === &#39;string&#39;</code> ✅<br>B. <code>console.log(value)</code><br>C. <code>value.length</code><br>D. <code>value instanceof</code> ✅</li></ol><p>型別守衛（Type Guard）是 TypeScript 裡用來在程式碼執行時檢查變數型別的一種技術。它可以讓編譯器根據條件判斷，縮小變數的型別範圍，從而安全地訪問該型別的屬性或方法。<br>typeof value === ‘string’<br>利用 typeof 運算子判斷原始型別，常用於檢查 string、number、boolean 等基本型別，是一種典型的型別守衛。<br>value instanceof SomeClass<br>利用 instanceof 判斷物件是否是某個類別的實例，也是典型的型別守衛。</p><hr><ol start="19"><li><strong>哪個工具型別會移除指定屬性？</strong><br>A. <code>Pick&lt;T, K&gt;</code><br>B. <code>Omit&lt;T, K&gt;</code> ✅<br>C. <code>Partial&lt;T&gt;</code><br>D. <code>Exclude&lt;T, K&gt;</code><br>這四個都是 TypeScript 內建的 工具型別（Utility Types），用來操作和轉換型別，讓開發更方便靈活。</li></ol><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//1.</span></span><br><span class="line"><span class="keyword">interface</span> Person &#123;</span><br><span class="line">  <span class="attr">name</span>: <span class="built_in">string</span>;</span><br><span class="line">  age: <span class="built_in">number</span>;</span><br><span class="line">  address: <span class="built_in">string</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">type</span> PersonNameAge = Pick&lt;Person, <span class="string">&quot;name&quot;</span> | <span class="string">&quot;age&quot;</span>&gt;;</span><br><span class="line"><span class="comment">// 等同於 &#123; name: string; age: number; &#125;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//2.</span></span><br><span class="line"><span class="keyword">type</span> PersonWithoutAddress = Omit&lt;Person, <span class="string">&quot;address&quot;</span>&gt;;</span><br><span class="line"><span class="comment">// 等同於 &#123; name: string; age: number; &#125;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//3.</span></span><br><span class="line"><span class="keyword">type</span> PartialPerson = Partial&lt;Person&gt;;</span><br><span class="line"><span class="comment">// 等同於 &#123; name?: string; age?: number; address?: string; &#125;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//4.</span></span><br><span class="line"><span class="keyword">type</span> T1 = <span class="string">&quot;a&quot;</span> | <span class="string">&quot;b&quot;</span> | <span class="string">&quot;c&quot;</span>;</span><br><span class="line"><span class="keyword">type</span> T2 = Exclude&lt;T1, <span class="string">&quot;a&quot;</span> | <span class="string">&quot;b&quot;</span>&gt;;</span><br><span class="line"><span class="comment">// 結果是 &quot;c&quot;</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><hr><ol start="20"><li><strong>下列哪個是 <code>enum</code> 的預設值？</strong><br>A. 從 0 開始遞增 ✅<br>B. 從 1 開始遞增<br>C. 必須手動指定<br>D. 沒有預設值</li></ol><hr><h3 id="混合進階題"><a href="#混合進階題" class="headerlink" title="混合進階題"></a><strong>混合進階題</strong></h3><ol start="21"><li><strong><code>infer</code> 關鍵字用於</strong><br>A. 在條件型別中推斷型別 ✅<br>B. 宣告泛型<br>C. 定義類別<br>D. 宣告常數</li></ol><p>infer 是 TypeScript 的關鍵字，只能用在 條件型別（conditional types） 裡面，<br>用來 從型別中「推斷（infer）」某個子型別，然後讓你在條件型別的「真分支」使用這個推斷出來的型別。</p><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">type</span> ReturnType&lt;T&gt; = T <span class="keyword">extends</span> (...args: <span class="built_in">any</span>[]) =&gt; infer R ? R : <span class="built_in">never</span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">fn</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="number">123</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">type</span> Result = ReturnType&lt;<span class="keyword">typeof</span> fn&gt;; <span class="comment">// Result = number</span></span><br></pre></td></tr></table></figure><hr><ol start="22"><li><strong>哪個選項正確使用了條件型別？</strong><br>A. <code>type IsString&lt;T&gt; = T extends string ? true : false;</code> ✅<br>B. <code>type IsString&lt;T&gt; = string extends T ? true : false;</code><br>C. <code>type IsString&lt;T&gt; = T ? true : false;</code><br>D. 以上皆非</li></ol><hr><ol start="23"><li><strong>下列哪個型別表示「除了 T 以外的所有型別」？</strong><br>A. <code>Exclude&lt;U, T&gt;</code> ✅<br>B. <code>Extract&lt;U, T&gt;</code><br>C. <code>Omit&lt;U, T&gt;</code><br>D. <code>Partial&lt;T&gt;</code></li></ol><hr><ol start="24"><li><p><strong>以下程式碼輸出什麼？</strong></p><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">enum</span> Color &#123; Red, Green, Blue &#125;</span><br><span class="line"><span class="built_in">console</span>.log(Color[<span class="number">0</span>]);</span><br></pre></td></tr></table></figure><p>A. <code>0</code><br>B. <code>&#39;Red&#39;</code> ✅<br>C. <code>&#39;0&#39;</code><br>D. <code>undefined</code></p></li></ol><hr><ol start="25"><li><strong>TypeScript 編譯器的輸出是什麼？</strong><br>A. <code>.ts</code> 檔案<br>B. <code>.d.ts</code> 檔案<br>C. <code>.js</code> 檔案 ✅<br>D. <code>.tsconfig</code> 檔案</li></ol><hr><ol start="26"><li><strong>哪個修飾子可以讓類別屬性在繼承中可用，但在外部不可存取？</strong><br>A. <code>private</code><br>B. <code>protected</code> ✅<br>C. <code>public</code><br>D. <code>readonly</code></li></ol><hr><ol start="27"><li><strong>下列哪個不是型別別名（Type Alias）的用途？</strong><br>A. 為複雜型別取別名<br>B. 定義物件形狀<br>C. 建立聯合型別<br>D. 被類別實作 ✅</li></ol><hr><ol start="28"><li><strong>TypeScript 中模組預設匯出的正確寫法是</strong><br>A. <code>export = MyClass;</code><br>B. <code>export default MyClass;</code> ✅<br>C. <code>module.exports = MyClass;</code><br>D. <code>exports.MyClass = MyClass;</code></li></ol><hr><ol start="29"><li><strong>下列哪個是非同步函式的正確寫法？</strong><br>A. <code>function getData(): Promise&lt;string&gt; &#123;&#125;</code><br>B. <code>async function getData(): Promise&lt;string&gt; &#123;&#125;</code> ✅<br>C. <code>function getData(): string &#123;&#125;</code><br>D. <code>await function getData() &#123;&#125;</code></li></ol><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 非同步函式，回傳 Promise&lt;string&gt;</span></span><br><span class="line"><span class="keyword">async</span> <span class="function"><span class="keyword">function</span> <span class="title">getData</span>(<span class="params"></span>): <span class="title">Promise</span>&lt;<span class="title">string</span>&gt; </span>&#123;</span><br><span class="line">  <span class="comment">// 模擬非同步操作，例如從伺服器取得資料</span></span><br><span class="line">  <span class="keyword">return</span> <span class="keyword">new</span> <span class="built_in">Promise</span>(<span class="function">(<span class="params">resolve, reject</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="built_in">setTimeout</span>(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">      resolve(<span class="string">&quot;這是取得的資料&quot;</span>);</span><br><span class="line">    &#125;, <span class="number">1000</span>);</span><br><span class="line">  &#125;);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 使用範例</span></span><br><span class="line"><span class="keyword">async</span> <span class="function"><span class="keyword">function</span> <span class="title">main</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">&quot;開始取得資料...&quot;</span>);</span><br><span class="line">  <span class="keyword">const</span> data = <span class="keyword">await</span> getData();</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">&quot;取得資料:&quot;</span>, data);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">main();</span><br></pre></td></tr></table></figure><hr><ol start="30"><li><strong>TypeScript 型別檔案的副檔名是</strong><br>A. <code>.ts</code><br>B. <code>.js</code><br>C. <code>.d.ts</code> ✅<br>D. <code>.type.ts</code></li></ol><p>.d.ts 檔案（宣告檔）<br>只包含型別宣告（Type Declarations），不包含實作。<br>.ts 檔案<br>定義程式碼的實作，包含函式、類別、變數等。<br>是你寫邏輯和功能的主要地方。<br>編譯時會被轉成 JavaScript。</p><hr><p>補充複選題：<br>以下哪些是 TypeScript 中內建的型別（Built-in Types）？（可複選，並說明它們的用途）</p><p>好，我幫你把剛剛那題複選題改成面試題完整格式，<br>並且在每個正確答案後面加上 <strong>使用場景說明</strong>，方便記憶與考試時快速回想。</p><hr><p><strong>題目：</strong><br>以下哪些是 <strong>TypeScript 中內建的型別（Built-in Types）</strong>？（可複選，並說明它們的用途）</p><hr><p>A. <code>string</code> ✅<br>　用來表示文字資料，例如：<br>　<code>ts 　let name: string = &quot;Alice&quot;; 　</code></p><p>B. <code>number</code> ✅<br>　用來表示數字（整數與浮點數），例如：<br>　<code>ts 　let age: number = 25; 　</code></p><p>C. <code>boolean</code> ✅<br>　表示布林值（true/false），例如：<br>　<code>ts 　let isActive: boolean = true; 　</code></p><p>D. <code>symbol</code> ✅<br>　表示唯一且不可變的值（常用於物件屬性 key），例如：<br>　<code>ts 　const id: symbol = Symbol(&quot;id&quot;); 　</code></p><p>E. <code>bigint</code> ✅<br>　表示任意精度的整數（大於 <code>Number.MAX_SAFE_INTEGER</code> 時使用），例如：<br>　<code>ts 　let big: bigint = 9007199254740991n; 　</code></p><p>F. <code>null</code> ✅<br>　表示空值（需在 <code>--strictNullChecks</code> 關閉時能直接賦值），例如：<br>　<code>ts 　let nothing: null = null; 　</code></p><p>G. <code>undefined</code> ✅<br>　表示未定義的值，變數未賦值時的預設值，例如：<br>　<code>ts 　let notAssigned: undefined = undefined; 　</code></p><p>H. <code>void</code> ✅<br>　表示函式不返回值，例如：<br>　<code>ts 　function logMessage(): void &#123; 　  console.log(&quot;Hello&quot;); 　&#125; 　</code></p><p>I. <code>never</code> ✅<br>　表示永遠不會有返回值（例如函式會拋出錯誤或無限循環），例如：<br>　<code>ts 　function throwError(): never &#123; 　  throw new Error(&quot;Error!&quot;); 　&#125; 　</code></p><p>J. <code>object</code> ✅<br>　表示非原始型別的值，例如物件、陣列、函式等：<br>　<code>ts 　let person: object = &#123; name: &quot;Bob&quot; &#125;; 　</code></p><p>K. <code>any</code> ✅<br>　表示不檢查型別（會失去型別安全），例如：<br>　<code>ts 　let data: any = 123; 　data = &quot;Hello&quot;; 　</code></p><p>L. <code>unknown</code> ✅<br>　表示未知型別（比 <code>any</code> 安全，必須先檢查型別才能使用），例如：<br>　<code>ts 　let value: unknown = &quot;Hello&quot;; 　if (typeof value === &quot;string&quot;) &#123; 　  console.log(value.toUpperCase()); 　&#125; 　</code></p><p>M. <code>Function</code> ✅<br>　表示任何函式型別，例如：<br>　<code>ts 　let fn: Function = () =&gt; console.log(&quot;Run&quot;); 　</code></p><p>N. <code>Array</code> ✅<br>　表示陣列（同時可以寫成 <code>T[]</code>），例如：<br>　<code>ts 　let list: Array&lt;number&gt; = [1, 2, 3]; 　</code></p><p>O. <code>tuple</code> ✅<br>　表示固定長度且每個元素型別已知的陣列，例如：<br>　<code>ts 　let tuple: [string, number] = [&quot;Age&quot;, 25]; 　</code></p><p>P. <code>Record</code> ❌<br>　（工具型別，不是基本型別）用於建立具有特定 key 與 value 型別的物件，例如：<br>　<code>ts 　type User = Record&lt;&quot;id&quot; | &quot;name&quot;, string&gt;; 　</code></p><p>Q. <code>enum</code> ✅<br>　列舉型別，用於定義一組具名常數，例如：<br>　<code>ts 　enum Direction &#123; Up, Down, Left, Right &#125; 　</code></p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;來到第三天，這回用AI生成了常見的Typescript面試選擇題。&lt;br&gt;一共30題，現在使用AI確實比過往一個一個爬stackoverflow好很多了。&lt;/p&gt;
&lt;p&gt;涵蓋基礎、進階、型別系統與實務應用&lt;/p&gt;
&lt;hr&gt;
&lt;h2 id=&quot;TypeScript-面試選擇題（</summary>
      
    
    
    
    <category term="Code" scheme="https://yuhsiang237.github.io/categories/Code/"/>
    
    <category term="Topic" scheme="https://yuhsiang237.github.io/categories/Topic/"/>
    
    <category term="Javascript" scheme="https://yuhsiang237.github.io/categories/Code/Javascript/"/>
    
    <category term="2025 Typescript" scheme="https://yuhsiang237.github.io/categories/Topic/2025-Typescript/"/>
    
    <category term="Typescript" scheme="https://yuhsiang237.github.io/categories/Code/Typescript/"/>
    
    
  </entry>
  
  <entry>
    <title>[Day02] Typescript實作強型別todolist</title>
    <link href="https://yuhsiang237.github.io/2025/08/12/Typescript-Day02/"/>
    <id>https://yuhsiang237.github.io/2025/08/12/Typescript-Day02/</id>
    <published>2025-08-12T13:17:12.000Z</published>
    <updated>2025-08-12T09:42:44.695Z</updated>
    
    <content type="html"><![CDATA[<p>這回主要使用Typescript時做一個todolist，以強型別方式規範資料，並操作CRUD<br>以過往實作經驗搭配AI撰寫，在職場正式專案上也很通用的做法</p><h4 id="功能"><a href="#功能" class="headerlink" title="功能"></a>功能</h4><ol><li>新增(create)</li><li>查詢(readAll, readById)</li><li>更新(update)</li><li>刪除(delete)</li><li>enum 狀態對應文字取得(getStatusName)</li></ol><h4 id="優點"><a href="#優點" class="headerlink" title="優點"></a>優點</h4><p>1.可讀性高:<br>透過 StatusCode.Done、StatusCode.Pending 等命名，<br>代碼一目了然，比單純用 1、2、3 更好理解。<br>反向查詢文字 StatusCode[status] 讓狀態展示更友善。<br>enum 支援數字 ↔ 字串互轉，<br>程式內可用數字節省空間，UI 顯示可用文字增強可讀性。</p><p>2.維護方便:<br>CRUD 邏輯封裝在 TodoManager 類別中，讓資料操作統一管理，易於擴展與維護。</p><p>3.封裝良好:<br>todos 陣列設為私有 (private)，外部只能透過方法操作資料，</p><p>4.型別安全:<br>status 欄位被定義成 StatusCode enum，<br>只能接受預先定義的數值（1 | 2 | 3），避免亂輸入或寫錯字串。<br>編譯器會檢查不合規的狀態賦值，降低執行錯誤風險。</p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 狀態 enum</span></span><br><span class="line"><span class="built_in">enum</span> StatusCode &#123;</span><br><span class="line">  Done = <span class="number">1</span>,</span><br><span class="line">  Pending = <span class="number">2</span>,</span><br><span class="line">  InProgress = <span class="number">3</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 中文對應</span></span><br><span class="line"><span class="keyword">const</span> StatusCodeNameChi: Record&lt;StatusCode, <span class="built_in">string</span>&gt; = &#123;</span><br><span class="line">  [StatusCode.Done]: <span class="string">&#x27;完成&#x27;</span>,</span><br><span class="line">  [StatusCode.Pending]: <span class="string">&#x27;等待&#x27;</span>,</span><br><span class="line">  [StatusCode.InProgress]: <span class="string">&#x27;進行中&#x27;</span></span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 英文對應</span></span><br><span class="line"><span class="keyword">const</span> StatusCodeNameEng: Record&lt;StatusCode, <span class="built_in">string</span>&gt; = &#123;</span><br><span class="line">  [StatusCode.Done]: <span class="string">&#x27;Done&#x27;</span>,</span><br><span class="line">  [StatusCode.Pending]: <span class="string">&#x27;Pending&#x27;</span>,</span><br><span class="line">  [StatusCode.InProgress]: <span class="string">&#x27;In Progress&#x27;</span></span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">// Todo 型別</span></span><br><span class="line"><span class="keyword">interface</span> Todo &#123;</span><br><span class="line">  <span class="attr">id</span>: <span class="built_in">number</span>;</span><br><span class="line">  nametitle: <span class="built_in">string</span>;</span><br><span class="line">  status: StatusCode;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">TodoManager</span> </span>&#123;</span><br><span class="line">  <span class="keyword">private</span> todos: Todo[] = [];</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 新增</span></span><br><span class="line">  create(todo: Todo): <span class="built_in">void</span> &#123;</span><br><span class="line">    <span class="built_in">this</span>.todos.push(todo);</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 讀取全部</span></span><br><span class="line">  readAll(): Todo[] &#123;</span><br><span class="line">    <span class="keyword">return</span> [...this.todos];</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 讀取單一</span></span><br><span class="line">  readById(id: <span class="built_in">number</span>): Todo | <span class="literal">undefined</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">this</span>.todos.find(<span class="function"><span class="params">t</span> =&gt;</span> t.id === id);</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 更新</span></span><br><span class="line">  update(id: <span class="built_in">number</span>, <span class="attr">updatedFields</span>: Partial&lt;Todo&gt;): <span class="built_in">boolean</span> &#123;</span><br><span class="line">    <span class="keyword">const</span> index = <span class="built_in">this</span>.todos.findIndex(<span class="function"><span class="params">t</span> =&gt;</span> t.id === id);</span><br><span class="line">    <span class="keyword">if</span> (index === -<span class="number">1</span>) <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">    <span class="built_in">this</span>.todos[index] = &#123; ...this.todos[index], ...updatedFields &#125;;</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 刪除</span></span><br><span class="line">  <span class="keyword">delete</span>(id: <span class="built_in">number</span>): <span class="built_in">boolean</span> &#123;</span><br><span class="line">    <span class="keyword">const</span> originalLength = <span class="built_in">this</span>.todos.length;</span><br><span class="line">    <span class="built_in">this</span>.todos = <span class="built_in">this</span>.todos.filter(<span class="function"><span class="params">t</span> =&gt;</span> t.id !== id);</span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">this</span>.todos.length &lt; originalLength;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 取得英文狀態名稱</span></span><br><span class="line">  getStatusNameEng(status: StatusCode): <span class="built_in">string</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> StatusCodeNameEng[status];</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 取得中文狀態名稱</span></span><br><span class="line">  getStatusNameChi(status: StatusCode): <span class="built_in">string</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> StatusCodeNameChi[status];</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 測試 CRUD</span></span><br><span class="line"><span class="keyword">const</span> manager = <span class="keyword">new</span> TodoManager();</span><br><span class="line"></span><br><span class="line">manager.create(&#123; <span class="attr">id</span>: <span class="number">1</span>, <span class="attr">nametitle</span>: <span class="string">&#x27;Test Task 1&#x27;</span>, <span class="attr">status</span>: StatusCode.Pending &#125;);</span><br><span class="line">manager.create(&#123; <span class="attr">id</span>: <span class="number">2</span>, <span class="attr">nametitle</span>: <span class="string">&#x27;Test Task 2&#x27;</span>, <span class="attr">status</span>: StatusCode.InProgress &#125;);</span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">&#x27;All Todos:&#x27;</span>, manager.readAll());</span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">&#x27;Todo with id=1:&#x27;</span>, manager.readById(<span class="number">1</span>));</span><br><span class="line"></span><br><span class="line">manager.update(<span class="number">1</span>, &#123; <span class="attr">status</span>: StatusCode.Done, <span class="attr">nametitle</span>: <span class="string">&#x27;Updated Task 1&#x27;</span> &#125;);</span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">&#x27;After Update:&#x27;</span>, manager.readById(<span class="number">1</span>));</span><br><span class="line"></span><br><span class="line">manager.delete(<span class="number">2</span>);</span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">&#x27;After Delete:&#x27;</span>, manager.readAll());</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> todo = manager.readById(<span class="number">1</span>);</span><br><span class="line"><span class="keyword">if</span> (todo) &#123;</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">&#x27;英文狀態:&#x27;</span>, manager.getStatusNameEng(todo.status));</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">&#x27;中文狀態:&#x27;</span>, manager.getStatusNameChi(todo.status));</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;這回主要使用Typescript時做一個todolist，以強型別方式規範資料，並操作CRUD&lt;br&gt;以過往實作經驗搭配AI撰寫，在職場正式專案上也很通用的做法&lt;/p&gt;
&lt;h4 id=&quot;功能&quot;&gt;&lt;a href=&quot;#功能&quot; class=&quot;headerlink&quot; title=&quot;</summary>
      
    
    
    
    <category term="Code" scheme="https://yuhsiang237.github.io/categories/Code/"/>
    
    <category term="Topic" scheme="https://yuhsiang237.github.io/categories/Topic/"/>
    
    <category term="Javascript" scheme="https://yuhsiang237.github.io/categories/Code/Javascript/"/>
    
    <category term="2025 Typescript" scheme="https://yuhsiang237.github.io/categories/Topic/2025-Typescript/"/>
    
    <category term="Typescript" scheme="https://yuhsiang237.github.io/categories/Code/Typescript/"/>
    
    
  </entry>
  
  <entry>
    <title>[Day01] Typescript與Javascript差異</title>
    <link href="https://yuhsiang237.github.io/2025/08/11/Typescript-Day01/"/>
    <id>https://yuhsiang237.github.io/2025/08/11/Typescript-Day01/</id>
    <published>2025-08-11T13:17:12.000Z</published>
    <updated>2025-08-11T04:34:41.871Z</updated>
    
    <content type="html"><![CDATA[<p>因為未來工作長期會使用到Typescript，所以就趁這時候筆記一下與JS的差異方面。<br>過去在寫Vue3、Angular時有大量接觸Typescript，就趁這時間重溫一下。</p><ol><li>賦值</li></ol><p>JS 是動態型別 → 錯誤在執行時才發現<br>TS 是靜態型別 → 編譯時就檢查出錯，減少 bug</p><p>JS</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> age = <span class="number">25</span>;</span><br><span class="line">age = <span class="string">&quot;twenty-five&quot;</span>; <span class="comment">// ✅ JS 不會報錯，可能導致執行期錯誤</span></span><br></pre></td></tr></table></figure><p>TS</p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> age: <span class="built_in">number</span> = <span class="number">25</span>;</span><br><span class="line">age = <span class="string">&quot;twenty-five&quot;</span>; </span><br><span class="line"><span class="comment">// ❌ 編譯錯誤：Type &#x27;string&#x27; is not assignable to type &#x27;number&#x27;</span></span><br></pre></td></tr></table></figure><ol start="2"><li>函數參數與回傳型別<br>TS 允許定義 參數型別 和 回傳型別，防止不合法輸入</li></ol><p>TS</p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">add</span>(<span class="params">a: <span class="built_in">number</span>, b: <span class="built_in">number</span></span>): <span class="title">number</span> </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> a + b;</span><br><span class="line">&#125;</span><br><span class="line">add(<span class="number">1</span>, <span class="string">&quot;2&quot;</span>); </span><br><span class="line"><span class="comment">// ❌ Argument of type &#x27;string&#x27; is not assignable to parameter of type &#x27;number&#x27;</span></span><br></pre></td></tr></table></figure><p>3.可選參數及預設值</p><p>TS 用 ? 宣告參數可選<br>搭配 nullish coalescing (??) 處理 null 或 undefined</p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">greet</span>(<span class="params">name?: <span class="built_in">string</span></span>) </span>&#123;</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">`Hello, <span class="subst">$&#123;name ?? <span class="string">&quot;Guest&quot;</span>&#125;</span>`</span>);</span><br><span class="line">&#125;</span><br><span class="line">greet();  <span class="comment">// Hello, Guest</span></span><br></pre></td></tr></table></figure><p>JS則是用||處理</p><p>JS</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">greet</span>(<span class="params">name</span>) </span>&#123;</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">`Hello, <span class="subst">$&#123;name || <span class="string">&quot;Guest&quot;</span>&#125;</span>`</span>);</span><br><span class="line">&#125;</span><br><span class="line">greet(); <span class="comment">// Hello, Guest</span></span><br></pre></td></tr></table></figure><p>4.Interface </p><p>TS interface 能保證物件結構正確，JS 則只能在執行時才發現問題</p><p>TS</p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">interface</span> User &#123;</span><br><span class="line">  <span class="attr">name</span>: <span class="built_in">string</span>;</span><br><span class="line">  age: <span class="built_in">number</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">printUser</span>(<span class="params">user: User</span>) </span>&#123;</span><br><span class="line">  <span class="built_in">console</span>.log(user.name, user.age);</span><br><span class="line">&#125;</span><br><span class="line">printUser(&#123; <span class="attr">name</span>: <span class="string">&quot;Alex&quot;</span>, <span class="attr">age</span>: <span class="number">25</span> &#125;); <span class="comment">// ✅</span></span><br><span class="line">printUser(&#123; <span class="attr">name</span>: <span class="string">&quot;Alex&quot;</span> &#125;);</span><br><span class="line"><span class="comment">// ❌ Property &#x27;age&#x27; is missing in type ...</span></span><br></pre></td></tr></table></figure><p>5.Enum vs. Magic String</p><p>Enum 可集中管理常量並提供型別檢查，避免拼錯問題<br>TS</p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">enum</span> Status &#123;</span><br><span class="line">  Success = <span class="string">&quot;success&quot;</span>,</span><br><span class="line">  Fail = <span class="string">&quot;fail&quot;</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> status: Status = Status.Success;</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> (status === Status.Success) &#123;</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">&quot;OK&quot;</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>JS則無<br>JS</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> status = <span class="string">&quot;success&quot;</span>; <span class="comment">// Magic string，容易拼錯</span></span><br><span class="line"><span class="keyword">if</span> (status === <span class="string">&quot;succes&quot;</span>) &#123; <span class="comment">// 拼錯不會報錯</span></span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">&quot;OK&quot;</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>6.參數多種型別檢查Union Types</p><p>TS:</p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">printId</span>(<span class="params">id: <span class="built_in">number</span> | <span class="built_in">string</span></span>) </span>&#123;</span><br><span class="line">  <span class="built_in">console</span>.log(id);</span><br><span class="line">&#125;</span><br><span class="line">printId(<span class="number">123</span>);</span><br><span class="line">printId(<span class="string">&quot;abc&quot;</span>);</span><br><span class="line">printId(<span class="literal">true</span>); </span><br><span class="line"><span class="comment">// ❌ Argument of type &#x27;boolean&#x27; is not assignable to parameter of type &#x27;string | number&#x27;</span></span><br></pre></td></tr></table></figure><ol start="7"><li>泛型 (Generics)</li></ol><p>any 會失去型別資訊<br>泛型保留型別，讓函數既安全又通用<br>TS:</p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">identity</span>&lt;<span class="title">T</span>&gt;(<span class="params">arg: T</span>): <span class="title">T</span> </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> arg;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> a = identity(<span class="number">123</span>); <span class="comment">// a: number</span></span><br><span class="line"><span class="keyword">const</span> b = identity(<span class="string">&quot;hi&quot;</span>); <span class="comment">// b: string</span></span><br></pre></td></tr></table></figure><p>一般JS不好確認型別<br>JS:</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">identity</span>(<span class="params">arg</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> arg; <span class="comment">// 無法知道回傳型別</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>8.非空斷言與 Optional Chaining</p><p>?. 可安全存取深層屬性<br>搭配 ! 非空斷言在確定不為空時跳過檢查<br>TS:</p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> user: <span class="built_in">any</span> = &#123;&#125;;</span><br><span class="line"><span class="built_in">console</span>.log(user?.profile?.name); <span class="comment">// ✅ undefined</span></span><br></pre></td></tr></table></figure><p>JS則無法<br>JS:</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> user = &#123;&#125;;</span><br><span class="line"><span class="built_in">console</span>.log(user.profile.name); <span class="comment">// ❌ TypeError</span></span><br></pre></td></tr></table></figure><ol start="9"><li>any vs. unknown<br>什麼時候用 any，什麼時候用 unknown？</li></ol><p>JS:</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> value; <span class="comment">// 無型別限制</span></span><br><span class="line">value.foo(); <span class="comment">// 可能出錯</span></span><br></pre></td></tr></table></figure><p>any 跟 JS 一樣完全不檢查型別（危險）<br>unknown 要先檢查型別才可使用（安全）</p><p>TS:</p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> value: unknown;</span><br><span class="line">value = <span class="string">&quot;hello&quot;</span>;</span><br><span class="line"><span class="comment">// value.toUpperCase(); ❌ 必須先做型別檢查</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> (<span class="keyword">typeof</span> value === <span class="string">&quot;string&quot;</span>) &#123;</span><br><span class="line">  <span class="built_in">console</span>.log(value.toUpperCase()); <span class="comment">// ✅</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ol start="10"><li>類別 (Class) 的型別修飾符</li></ol><p>JS 與 TS 在類別屬性可見性上的差異<br>JS:</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Person</span> </span>&#123;</span><br><span class="line">  <span class="function"><span class="title">constructor</span>(<span class="params">name</span>)</span> &#123;</span><br><span class="line">    <span class="built_in">this</span>.name = name; <span class="comment">// 無法限制外部訪問</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>TS 提供 public（預設）、private、protected，可精確控制存取範圍</p><p>TS:</p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Person</span> </span>&#123;</span><br><span class="line">  <span class="keyword">private</span> name: <span class="built_in">string</span>; <span class="comment">// 僅類別內可訪問</span></span><br><span class="line">  <span class="function"><span class="title">constructor</span>(<span class="params">name: <span class="built_in">string</span></span>)</span> &#123;</span><br><span class="line">    <span class="built_in">this</span>.name = name;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ol start="11"><li>型別別名（Type Alias）與複雜型別組合</li></ol><p>大型專案中可以將複雜型別命名，方便重用與維護<br>TS:</p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">type</span> OrderStatus = <span class="string">&quot;pending&quot;</span> | <span class="string">&quot;shipped&quot;</span> | <span class="string">&quot;delivered&quot;</span>;</span><br><span class="line"><span class="keyword">type</span> Order = &#123; <span class="attr">id</span>: <span class="built_in">number</span>; status: OrderStatus &#125;;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">process</span>(<span class="params">order: Order</span>) </span>&#123; <span class="comment">/* ... */</span> &#125;</span><br></pre></td></tr></table></figure><ol start="12"><li>Intersection Types（交叉型別）合併資料結構</li></ol><p>JS:</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 只能動態合併物件</span></span><br><span class="line"><span class="keyword">const</span> person = <span class="built_in">Object</span>.assign(&#123;&#125;, &#123; <span class="attr">name</span>: <span class="string">&quot;Alex&quot;</span> &#125;, &#123; <span class="attr">age</span>: <span class="number">25</span> &#125;);</span><br></pre></td></tr></table></figure><p>交叉型別在多個模組資料合併時很常用（特別是 Redux / API 結果整合）</p><p>TS:</p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">type</span> Name = &#123; <span class="attr">name</span>: <span class="built_in">string</span> &#125;;</span><br><span class="line"><span class="keyword">type</span> Age = &#123; <span class="attr">age</span>: <span class="built_in">number</span> &#125;;</span><br><span class="line"><span class="keyword">type</span> Person = Name &amp; Age; <span class="comment">// 交叉型別</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> person: Person = &#123; <span class="attr">name</span>: <span class="string">&quot;Alex&quot;</span>, <span class="attr">age</span>: <span class="number">25</span> &#125;;</span><br></pre></td></tr></table></figure><ol start="13"><li>型別守衛（Type Guards）</li></ol><p>JS</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">handle</span>(<span class="params">val</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">if</span> (val.start) val.start(); <span class="comment">// 可能 undefined</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>大型專案裡經常用自訂型別守衛來精準縮小型別範圍</p><p>TS</p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">isFunction</span>(<span class="params">value: unknown</span>): <span class="title">value</span> <span class="title">is</span> <span class="title">Function</span> </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="keyword">typeof</span> value === <span class="string">&quot;function&quot;</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">handle</span>(<span class="params">val: unknown</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">if</span> (isFunction(val)) &#123;</span><br><span class="line">    val(); <span class="comment">// ✅ 已縮小型別</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ol start="14"><li>宣告檔（.d.ts）與第三方函式庫型別</li></ol><p>JS:</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 使用第三方庫時，無法獲得型別提示</span></span><br><span class="line"><span class="keyword">import</span> moment <span class="keyword">from</span> <span class="string">&quot;moment&quot;</span>;</span><br><span class="line">moment().format(<span class="string">&quot;YYYY-MM-DD&quot;</span>); <span class="comment">// 沒 IntelliSense</span></span><br></pre></td></tr></table></figure><p>大型專案幾乎都要用 .d.ts 來補齊沒有型別定義的第三方套件<br>TS:</p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// @types/moment 提供型別定義</span></span><br><span class="line"><span class="keyword">import</span> moment <span class="keyword">from</span> <span class="string">&quot;moment&quot;</span>;</span><br><span class="line">moment().format(<span class="string">&quot;YYYY-MM-DD&quot;</span>); <span class="comment">// ✅ 型別提示 + 自動完成</span></span><br></pre></td></tr></table></figure><p>15.readonly 與 Immutable 資料結構</p><p>readonly 對大型專案的設定檔、常量物件非常重要</p><p>Typescript</p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">type</span> Config = &#123;</span><br><span class="line">  <span class="keyword">readonly</span> port: <span class="built_in">number</span>;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> config: Config = &#123; <span class="attr">port</span>: <span class="number">3000</span> &#125;;</span><br><span class="line">config.port = <span class="number">4000</span>; </span><br><span class="line"><span class="comment">// ❌ Cannot assign to &#x27;port&#x27; because it is a read-only property</span></span><br></pre></td></tr></table></figure><ol start="16"><li>keyof 與型別安全的物件鍵名存取</li></ol><p>JS</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">getProp</span>(<span class="params">obj, key</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> obj[key]; <span class="comment">// key 可能錯拼</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>keyof 確保傳入的屬性名稱是物件中真實存在的鍵名</p><p>TS</p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">getProp</span>&lt;<span class="title">T</span>, <span class="title">K</span> <span class="title">extends</span> <span class="title">keyof</span> <span class="title">T</span>&gt;(<span class="params">obj: T, key: K</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> obj[key];</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> user = &#123; <span class="attr">id</span>: <span class="number">1</span>, <span class="attr">name</span>: <span class="string">&quot;Alex&quot;</span> &#125;;</span><br><span class="line">getProp(user, <span class="string">&quot;name&quot;</span>); <span class="comment">// ✅</span></span><br><span class="line">getProp(user, <span class="string">&quot;age&quot;</span>);  </span><br><span class="line"><span class="comment">// ❌ Argument of type &#x27;&quot;age&quot;&#x27; is not assignable to parameter of type &#x27;&quot;id&quot; | &quot;name&quot;&#x27;</span></span><br></pre></td></tr></table></figure><ol start="17"><li>Mapped Types（映射型別）</li></ol><p>JS:</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 只能手動定義每個屬性為可選</span></span><br><span class="line"><span class="keyword">const</span> partialUser = &#123; <span class="attr">name</span>: <span class="string">&quot;Alex&quot;</span> &#125;;</span><br></pre></td></tr></table></figure><p>大型專案中 Partial、Required、Readonly 等都是 Mapped Types 的應用</p><p>TS:</p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">type</span> User = &#123; <span class="attr">id</span>: <span class="built_in">number</span>; name: <span class="built_in">string</span>; age: <span class="built_in">number</span> &#125;;</span><br><span class="line"><span class="keyword">type</span> PartialUser = &#123; [K <span class="keyword">in</span> keyof User]?: User[K] &#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> partialUser: PartialUser = &#123; <span class="attr">name</span>: <span class="string">&quot;Alex&quot;</span> &#125;;</span><br></pre></td></tr></table></figure><ol start="18"><li>模組與命名空間（Modules vs Namespaces）</li></ol><p>JS:</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 無型別檢查的全域污染</span></span><br><span class="line"><span class="built_in">window</span>.myApp = &#123;&#125;;</span><br></pre></td></tr></table></figure><p>大型專案建議使用 ES Modules 搭配 TS 的型別系統管理命名與依賴</p><p>TS:</p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 使用模組系統</span></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">const</span> myApp = &#123;&#125;;</span><br></pre></td></tr></table></figure><ol start="19"><li>型別推斷與 as const</li></ol><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> roles = [<span class="string">&quot;admin&quot;</span>, <span class="string">&quot;user&quot;</span>];</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>as const 在定義固定字面值陣列、物件時非常有用（例如權限、狀態碼）</p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> roles = [<span class="string">&quot;admin&quot;</span>, <span class="string">&quot;user&quot;</span>] <span class="keyword">as</span> <span class="keyword">const</span>;</span><br><span class="line"><span class="comment">// roles: readonly [&quot;admin&quot;, &quot;user&quot;]</span></span><br><span class="line"><span class="keyword">type</span> Role = <span class="keyword">typeof</span> roles[<span class="built_in">number</span>]; <span class="comment">// &quot;admin&quot; | &quot;user&quot;</span></span><br></pre></td></tr></table></figure><ol start="20"><li>Non-null Assertion（非空斷言）與嚴格模式</li></ol><p>JS:</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> el = <span class="built_in">document</span>.getElementById(<span class="string">&quot;myDiv&quot;</span>);</span><br><span class="line">el.style.color = <span class="string">&quot;red&quot;</span>; <span class="comment">// el 可能是 null</span></span><br></pre></td></tr></table></figure><p>嚴格模式 (strictNullChecks) 在大型專案中很重要，可以提早發現 null/undefined 錯誤</p><p>TS:</p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> el = <span class="built_in">document</span>.getElementById(<span class="string">&quot;myDiv&quot;</span>)!;</span><br><span class="line">el.style.color = <span class="string">&quot;red&quot;</span>; <span class="comment">// ✅ 告訴 TS 這裡一定不為 null</span></span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;因為未來工作長期會使用到Typescript，所以就趁這時候筆記一下與JS的差異方面。&lt;br&gt;過去在寫Vue3、Angular時有大量接觸Typescript，就趁這時間重溫一下。&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;賦值&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;JS 是動態型別 → 錯誤在執行</summary>
      
    
    
    
    <category term="Code" scheme="https://yuhsiang237.github.io/categories/Code/"/>
    
    <category term="Topic" scheme="https://yuhsiang237.github.io/categories/Topic/"/>
    
    <category term="Javascript" scheme="https://yuhsiang237.github.io/categories/Code/Javascript/"/>
    
    <category term="2025 Typescript" scheme="https://yuhsiang237.github.io/categories/Topic/2025-Typescript/"/>
    
    <category term="Typescript" scheme="https://yuhsiang237.github.io/categories/Code/Typescript/"/>
    
    
  </entry>
  
  <entry>
    <title>C# Flatten data by Linq</title>
    <link href="https://yuhsiang237.github.io/2023/05/12/C-Flatten-data-by-Linq/"/>
    <id>https://yuhsiang237.github.io/2023/05/12/C-Flatten-data-by-Linq/</id>
    <published>2023-05-12T08:09:52.000Z</published>
    <updated>2025-08-11T03:49:08.011Z</updated>
    
    <content type="html"><![CDATA[<p>When I work on the project, I usually run into a problem about flatting data.<br>Because the original data could in the nested property, I have to get it out.<br>The following is an example about nested properties, and the requirement is that I must get all OrderDetailNumber.</p><p>Finally, I found an easy method that is use SelectMany.</p><p><strong>LINQ SelectMany</strong></p><p>Projects each element of a sequence to an IEnumerable<T> and flattens the resulting sequences into one sequence.</p><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">using</span> System;</span><br><span class="line"><span class="keyword">using</span> System.Linq;</span><br><span class="line"><span class="keyword">using</span> System.Collections.Generic;</span><br><span class="line"></span><br><span class="line"><span class="keyword">namespace</span> <span class="title">FlattenResult</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">internal</span> <span class="keyword">class</span> <span class="title">Program</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">public</span> <span class="keyword">class</span> <span class="title">Order</span></span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">public</span> <span class="built_in">string</span> OrderNumber &#123; <span class="keyword">get</span>; <span class="keyword">set</span>; &#125;</span><br><span class="line"></span><br><span class="line">            <span class="keyword">public</span> List&lt;OrderDetail&gt; orderDetails &#123; <span class="keyword">get</span>; <span class="keyword">set</span>; &#125;</span><br><span class="line"></span><br><span class="line">            <span class="keyword">public</span> <span class="keyword">class</span> <span class="title">OrderDetail</span></span><br><span class="line">            &#123;</span><br><span class="line">                <span class="keyword">public</span> <span class="built_in">string</span> OrderDetailNumber &#123; <span class="keyword">get</span>; <span class="keyword">set</span>; &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="function"><span class="keyword">static</span> <span class="keyword">void</span> <span class="title">Main</span>(<span class="params"><span class="built_in">string</span>[] args</span>)</span></span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">var</span> orders = <span class="keyword">new</span> List&lt;Order&gt;</span><br><span class="line">            &#123;</span><br><span class="line">                <span class="keyword">new</span> Order</span><br><span class="line">                &#123;</span><br><span class="line">                    OrderNumber = <span class="string">&quot;202305121111&quot;</span>,</span><br><span class="line">                    orderDetails = <span class="keyword">new</span> List&lt;Order.OrderDetail&gt;</span><br><span class="line">                        &#123;</span><br><span class="line">                            <span class="keyword">new</span> Order.OrderDetail</span><br><span class="line">                            &#123;</span><br><span class="line">                                OrderDetailNumber = <span class="string">&quot;OD0001&quot;</span>,</span><br><span class="line">                            &#125;,</span><br><span class="line">                            <span class="keyword">new</span> Order.OrderDetail</span><br><span class="line">                            &#123;</span><br><span class="line">                                OrderDetailNumber = <span class="string">&quot;OD0001&quot;</span>,</span><br><span class="line">                            &#125;</span><br><span class="line">                        &#125;</span><br><span class="line">                &#125;,</span><br><span class="line">                <span class="keyword">new</span> Order</span><br><span class="line">                &#123;</span><br><span class="line">                    OrderNumber = <span class="string">&quot;202305121112&quot;</span>,</span><br><span class="line">                    orderDetails = <span class="keyword">new</span> List&lt;Order.OrderDetail&gt;</span><br><span class="line">                        &#123;</span><br><span class="line">                            <span class="keyword">new</span> Order.OrderDetail</span><br><span class="line">                            &#123;</span><br><span class="line">                                OrderDetailNumber = <span class="string">&quot;OD0003&quot;</span>,</span><br><span class="line">                            &#125;,</span><br><span class="line">                            <span class="keyword">new</span> Order.OrderDetail</span><br><span class="line">                            &#123;</span><br><span class="line">                                OrderDetailNumber = <span class="string">&quot;OD0004&quot;</span>,</span><br><span class="line">                            &#125;</span><br><span class="line">                        &#125;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;;</span><br><span class="line"></span><br><span class="line">            <span class="keyword">var</span> orderDetailNumbers = orders.SelectMany(s =&gt; s.orderDetails)</span><br><span class="line">                                           .Select(s =&gt; s.OrderDetailNumber)</span><br><span class="line">                                           .ToList();</span><br><span class="line"></span><br><span class="line">            orderDetailNumbers.ForEach(f =&gt;</span><br><span class="line">            &#123;</span><br><span class="line">                Console.WriteLine(f);</span><br><span class="line">            &#125;);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>Output:</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">OD0001</span><br><span class="line">OD0001</span><br><span class="line">OD0003</span><br><span class="line">OD0004</span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;When I work on the project, I usually run into a problem about flatting data.&lt;br&gt;Because the original data could in the nested property, </summary>
      
    
    
    
    <category term="Code" scheme="https://yuhsiang237.github.io/categories/Code/"/>
    
    <category term="C#" scheme="https://yuhsiang237.github.io/categories/Code/C/"/>
    
    
  </entry>
  
  <entry>
    <title>C# Use AutoMapper to map data model</title>
    <link href="https://yuhsiang237.github.io/2023/03/27/C-AutomapperDemo/"/>
    <id>https://yuhsiang237.github.io/2023/03/27/C-AutomapperDemo/</id>
    <published>2023-03-27T03:18:27.000Z</published>
    <updated>2025-08-11T03:49:08.011Z</updated>
    
    <content type="html"><![CDATA[<p>When writing data to SQL Server, there is always a process about mapping model.<br>The process is a transformation, such as A model transforming B model.<br>If the model contains too many properties, the code could became very long.<br>So we can use a plugin, AutoMapper, to avoid that.</p><p>AutoMapper : <a href="https://docs.automapper.org/">https://docs.automapper.org/</a></p><p>The following is an example of implementation about converting PersonModel to PersonDto, which is a list convert.</p><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">using</span> System;</span><br><span class="line"><span class="keyword">using</span> System.Collections.Generic;</span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> AutoMapper;</span><br><span class="line"></span><br><span class="line"><span class="keyword">namespace</span> <span class="title">AutoMapExample</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">class</span> <span class="title">Program</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">public</span> <span class="keyword">class</span> <span class="title">PersonModel</span></span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">public</span> <span class="built_in">string</span> PersionalID &#123; <span class="keyword">get</span>; <span class="keyword">set</span>; &#125;</span><br><span class="line">            <span class="keyword">public</span> <span class="built_in">string</span> Name &#123; <span class="keyword">get</span>; <span class="keyword">set</span>; &#125;</span><br><span class="line">            <span class="keyword">public</span> <span class="built_in">int</span>? Age &#123; <span class="keyword">get</span>; <span class="keyword">set</span>; &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">public</span> <span class="keyword">class</span> <span class="title">PersonDto</span></span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">public</span> <span class="built_in">int</span>? Id &#123; <span class="keyword">get</span>; <span class="keyword">set</span>; &#125;</span><br><span class="line">            <span class="keyword">public</span> <span class="built_in">string</span> Pid &#123; <span class="keyword">get</span>; <span class="keyword">set</span>; &#125;</span><br><span class="line">            <span class="keyword">public</span> <span class="built_in">string</span> Name &#123; <span class="keyword">get</span>; <span class="keyword">set</span>; &#125;</span><br><span class="line">            <span class="keyword">public</span> <span class="built_in">int</span>? Age &#123; <span class="keyword">get</span>; <span class="keyword">set</span>; &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">Main</span>(<span class="params"></span>)</span></span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">var</span> personlist = <span class="keyword">new</span> List&lt;PersonModel&gt;</span><br><span class="line">            &#123;</span><br><span class="line">                <span class="keyword">new</span> PersonModel</span><br><span class="line">                &#123;</span><br><span class="line">                    PersionalID = <span class="string">&quot;E111111111&quot;</span>,</span><br><span class="line">                    Name = <span class="string">&quot;TOM&quot;</span>,</span><br><span class="line">                    Age = <span class="number">20</span>,</span><br><span class="line">                &#125;,</span><br><span class="line">                <span class="keyword">new</span> PersonModel</span><br><span class="line">                &#123;</span><br><span class="line">                    PersionalID = <span class="string">&quot;B111111111&quot;</span>,</span><br><span class="line">                    Name = <span class="string">&quot;J.Cole&quot;</span>,</span><br><span class="line">                    Age = <span class="number">26</span>,</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;;</span><br><span class="line"></span><br><span class="line">            <span class="keyword">var</span> config = <span class="keyword">new</span> MapperConfiguration(cfg =&gt;</span><br><span class="line">            &#123;</span><br><span class="line">                cfg.CreateMap&lt;PersonModel, PersonDto&gt;()</span><br><span class="line">                    .ForMember(dest =&gt; dest.Pid, opt =&gt; opt.MapFrom(src =&gt; src.PersionalID))</span><br><span class="line">                    .ForMember(dest =&gt; dest.Id, opt =&gt; opt.Ignore());</span><br><span class="line">            &#125;);</span><br><span class="line"></span><br><span class="line">            <span class="comment">// Check for missing mapped properties.</span></span><br><span class="line">            config.AssertConfigurationIsValid();</span><br><span class="line"></span><br><span class="line">            <span class="keyword">var</span> mapper = config.CreateMapper();</span><br><span class="line">            <span class="keyword">var</span> dtoList = mapper.Map&lt;List&lt;PersonModel&gt;, List&lt;PersonDto&gt;&gt;(personlist);</span><br><span class="line"></span><br><span class="line">            dtoList.ForEach(x =&gt;</span><br><span class="line">                &#123;</span><br><span class="line">                    Console.WriteLine(<span class="string">$&quot;id:<span class="subst">&#123;x.Id&#125;</span>,pid:<span class="subst">&#123;x.Pid&#125;</span>,name:<span class="subst">&#123;x.Name&#125;</span>,age:<span class="subst">&#123;x.Age&#125;</span>&quot;</span>);</span><br><span class="line">                &#125;);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>output</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">id:,pid:E111111111,name:TOM,age:20</span><br><span class="line">id:,pid:B111111111,name:J.Cole,age:26</span><br></pre></td></tr></table></figure><p>Because id was set to ignore, it’s null when the console prints them. </p><p>The following is the mapping of the different name properity. Due to the name of the properity is different so I have to define a rule to map, such as PersionalID =&gt; Pid.</p><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ForMember(dest =&gt; dest.Pid, opt =&gt; opt.MapFrom(src =&gt; src.PersionalID))</span><br></pre></td></tr></table></figure><p>The following is a check for missing mapped properties.</p><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">config.AssertConfigurationIsValid()</span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;When writing data to SQL Server, there is always a process about mapping model.&lt;br&gt;The process is a transformation, such as A model trans</summary>
      
    
    
    
    <category term="Code" scheme="https://yuhsiang237.github.io/categories/Code/"/>
    
    <category term="C#" scheme="https://yuhsiang237.github.io/categories/Code/C/"/>
    
    
  </entry>
  
  <entry>
    <title>Use C# SemaphoreSlim to lock async functions</title>
    <link href="https://yuhsiang237.github.io/2023/03/13/Use-C-SemaphoreSlim-to-lock-async/"/>
    <id>https://yuhsiang237.github.io/2023/03/13/Use-C-SemaphoreSlim-to-lock-async/</id>
    <published>2023-03-13T09:18:49.000Z</published>
    <updated>2025-08-11T03:49:08.761Z</updated>
    
    <content type="html"><![CDATA[<p>When writing an async function or method, I encountered a problem with accessing data one-by-one, such as starting 100000 async APIs, which could lead to bugs. </p><p>Below is a problem example. I expect the result to be “Sum:100000”, but the actual result is “Sum:99995” or other abnormal results.</p><p><strong>Example 1:</strong></p><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">namespace</span> <span class="title">SemaphoreSlimExample</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title">Program</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="built_in">int</span> _sum;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span>  <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">Main</span>(<span class="params"><span class="built_in">string</span>[] args</span>)</span></span><br><span class="line">    &#123;</span><br><span class="line">        Task.WaitAll(Enumerable</span><br><span class="line">            .Range(<span class="number">0</span>, <span class="number">100000</span>)</span><br><span class="line">            .Select(x =&gt; Add(<span class="number">1</span>))</span><br><span class="line">            .ToArray());</span><br><span class="line">        Console.WriteLine(<span class="string">$&quot;Sum:<span class="subst">&#123;_sum&#125;</span>&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">async</span> Task <span class="title">Add</span>(<span class="params"><span class="built_in">int</span> num</span>)</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">await</span> Task.Run(() =&gt;</span><br><span class="line">        &#123;</span><br><span class="line">            _sum += num;</span><br><span class="line">        &#125;);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p><strong>Result:</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Sum:99995</span><br></pre></td></tr></table></figure><p>To fix this problem, I added the SemaphoreSlim to code, and the result always is correct  “Sum:100000”.<br>It helps us lock and limit the asynchronous function’s data to one-by-one. </p><p>What is Semaphoreslim:<br><a href="https://learn.microsoft.com/en-us/dotnet/api/system.threading.semaphoreslim?view=net-7.0">https://learn.microsoft.com/en-us/dotnet/api/system.threading.semaphoreslim?view=net-7.0</a></p><p>Represents a lightweight alternative to Semaphore that limits the number of threads that can access a resource or pool of resources concurrently.</p><p><strong>Example2:</strong></p><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">namespace</span> <span class="title">SemaphoreSlimExample</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title">Program</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="built_in">int</span> _sum;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">readonly</span> SemaphoreSlim locker = <span class="keyword">new</span> SemaphoreSlim(<span class="number">1</span>, <span class="number">1</span>);</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">Main</span>(<span class="params"><span class="built_in">string</span>[] args</span>)</span></span><br><span class="line">    &#123;</span><br><span class="line">        Task.WaitAll(Enumerable</span><br><span class="line">            .Range(<span class="number">0</span>, <span class="number">100000</span>)</span><br><span class="line">            .Select(x =&gt; Add(<span class="number">1</span>))</span><br><span class="line">            .ToArray());</span><br><span class="line">        Console.WriteLine(<span class="string">$&quot;Sum:<span class="subst">&#123;_sum&#125;</span>&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">async</span> Task <span class="title">Add</span>(<span class="params"><span class="built_in">int</span> num</span>)</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">await</span> locker.WaitAsync();</span><br><span class="line"></span><br><span class="line">        <span class="keyword">await</span> Task.Run(() =&gt;</span><br><span class="line">        &#123;</span><br><span class="line">            _sum += num;</span><br><span class="line">        &#125;);</span><br><span class="line"></span><br><span class="line">        locker.Release();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p><strong>Result:</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Sum:100000</span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;When writing an async function or method, I encountered a problem with accessing data one-by-one, such as starting 100000 async APIs, whi</summary>
      
    
    
    
    <category term="Code" scheme="https://yuhsiang237.github.io/categories/Code/"/>
    
    <category term="C#" scheme="https://yuhsiang237.github.io/categories/Code/C/"/>
    
    <category term="Topic" scheme="https://yuhsiang237.github.io/categories/Topic/"/>
    
    <category term="2022 C# SyncAndAsync" scheme="https://yuhsiang237.github.io/categories/Topic/2022-C-SyncAndAsync/"/>
    
    
  </entry>
  
  <entry>
    <title>C# Distinct objects</title>
    <link href="https://yuhsiang237.github.io/2023/02/14/C-Distinct-object/"/>
    <id>https://yuhsiang237.github.io/2023/02/14/C-Distinct-object/</id>
    <published>2023-02-14T08:13:37.000Z</published>
    <updated>2025-08-11T03:49:08.011Z</updated>
    
    <content type="html"><![CDATA[<p>In the case, I want to remove the duplicate objects of the list.<br>I use the object key, <code>UserId</code> and <code>Type</code>, to distinguish them in the list.<br>After I distinct the objects, the count of the list becomes 2.<br>The numbers of the list are 2023021403 and 2023021401.</p><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">using</span> System;</span><br><span class="line"><span class="keyword">using</span> System.Collections.Generic;</span><br><span class="line"><span class="keyword">using</span> System.Linq;</span><br><span class="line"></span><br><span class="line"><span class="keyword">namespace</span> <span class="title">App</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">internal</span> <span class="keyword">class</span> <span class="title">Program</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">private</span> <span class="keyword">class</span> <span class="title">OrderModel</span></span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">public</span> <span class="built_in">int</span> UserId &#123; <span class="keyword">get</span>; <span class="keyword">set</span>; &#125;</span><br><span class="line">            <span class="keyword">public</span> <span class="built_in">int</span> Type &#123; <span class="keyword">get</span>; <span class="keyword">set</span>; &#125;</span><br><span class="line">            <span class="keyword">public</span> <span class="built_in">string</span> Number &#123; <span class="keyword">get</span>; <span class="keyword">set</span>; &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="function"><span class="keyword">static</span> <span class="keyword">void</span> <span class="title">Main</span>(<span class="params"><span class="built_in">string</span>[] args</span>)</span></span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">var</span> orders = <span class="keyword">new</span> List&lt;OrderModel&gt;</span><br><span class="line">            &#123;</span><br><span class="line">                <span class="keyword">new</span> OrderModel</span><br><span class="line">                &#123;</span><br><span class="line">                    UserId = <span class="number">1</span>,</span><br><span class="line">                    Type = <span class="number">1</span>,</span><br><span class="line">                    Number = <span class="string">&quot;2023021401&quot;</span></span><br><span class="line">                &#125;,</span><br><span class="line">                <span class="keyword">new</span> OrderModel</span><br><span class="line">                &#123;</span><br><span class="line">                    UserId = <span class="number">1</span>,</span><br><span class="line">                    Type = <span class="number">1</span>,</span><br><span class="line">                    Number = <span class="string">&quot;2023021402&quot;</span></span><br><span class="line">                &#125;</span><br><span class="line">                ,</span><br><span class="line">                <span class="keyword">new</span> OrderModel</span><br><span class="line">                &#123;</span><br><span class="line">                    UserId = <span class="number">1</span>,</span><br><span class="line">                    Type = <span class="number">2</span>,</span><br><span class="line">                    Number = <span class="string">&quot;2023021403&quot;</span></span><br><span class="line">                &#125;</span><br><span class="line">            &#125;;</span><br><span class="line"></span><br><span class="line">            <span class="keyword">var</span> distinctList = orders</span><br><span class="line">                               .GroupBy(x =&gt; <span class="keyword">new</span> &#123; x.Type, x.UserId &#125;)</span><br><span class="line">                               .Select(x =&gt; x.FirstOrDefault())</span><br><span class="line">                               .ToList();</span><br><span class="line"></span><br><span class="line">            <span class="keyword">foreach</span> (<span class="keyword">var</span> o <span class="keyword">in</span> distinctList)</span><br><span class="line">            &#123;</span><br><span class="line">                Console.WriteLine(<span class="string">$&quot;Number:<span class="subst">&#123;o.Number&#125;</span>&quot;</span>);</span><br><span class="line">                Console.WriteLine(<span class="string">$&quot;UserId:<span class="subst">&#123;o.UserId&#125;</span>&quot;</span>);</span><br><span class="line">                Console.WriteLine(<span class="string">$&quot;Type:<span class="subst">&#123;o.Type&#125;</span>&quot;</span>);</span><br><span class="line">                Console.WriteLine(<span class="string">&quot;===&quot;</span>);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>Output:</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">Number:2023021401</span><br><span class="line">UserId:1</span><br><span class="line">Type:1</span><br><span class="line">===</span><br><span class="line">Number:2023021403</span><br><span class="line">UserId:1</span><br><span class="line">Type:2</span><br><span class="line">===</span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;In the case, I want to remove the duplicate objects of the list.&lt;br&gt;I use the object key, &lt;code&gt;UserId&lt;/code&gt; and &lt;code&gt;Type&lt;/code&gt;, to d</summary>
      
    
    
    
    <category term="Code" scheme="https://yuhsiang237.github.io/categories/Code/"/>
    
    <category term="C#" scheme="https://yuhsiang237.github.io/categories/Code/C/"/>
    
    
  </entry>
  
  <entry>
    <title>Simplify queries in SQL Server using CTE</title>
    <link href="https://yuhsiang237.github.io/2023/02/03/Use-CTE-to-simplify-query-in-SQL-Server/"/>
    <id>https://yuhsiang237.github.io/2023/02/03/Use-CTE-to-simplify-query-in-SQL-Server/</id>
    <published>2023-02-03T07:21:45.000Z</published>
    <updated>2025-08-11T03:49:08.761Z</updated>
    
    <content type="html"><![CDATA[<p>If you use queries in SQL, you could involve complex statements that could cause some maintenance or reading problems. You can still do them, but you can choose a new way, <code>CTE</code>.</p><p><strong>What is CTE?</strong><br>The common table expression (CTE) is a powerful construct in SQL that helps simplify a query.</p><p>With CTE, you can split the query into different temporary tables and use them.</p><h3 id="Example"><a href="#Example" class="headerlink" title="Example"></a>Example</h3><p>If I want to create a report about the total amount of the user’s order, I could use CTE to simplify it.</p><p><strong>[dbo].[Orders]</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">OrderNumberUserIdAmount</span><br><span class="line">20230203000000011500</span><br><span class="line">20230203000000023100</span><br><span class="line">20230203000000031300</span><br><span class="line">20230203000000042400</span><br><span class="line">20230203000000051100</span><br></pre></td></tr></table></figure><p><strong>[dbo].[Users]</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">IdNameAge</span><br><span class="line">1CK30</span><br><span class="line">2RR29</span><br><span class="line">3NC25</span><br></pre></td></tr></table></figure><p>Then I use the CTE to create a temp table and join them.</p><p>Result:</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">IdNameAgeOrderTotalAmount</span><br><span class="line">1CK30900</span><br><span class="line">2RR29400</span><br><span class="line">3NC25100</span><br></pre></td></tr></table></figure><p>SQL:</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">USE OrderDB</span><br><span class="line">GO</span><br><span class="line"><span class="keyword">WITH</span> Order_User_Total_CTE (UserId, OrderTotalAmount)</span><br><span class="line"><span class="keyword">AS</span></span><br><span class="line"><span class="comment">-- Define the User Order Total CTE query.</span></span><br><span class="line">(</span><br><span class="line">    <span class="keyword">SELECT</span> UserId, <span class="built_in">SUM</span>(Amount) <span class="keyword">AS</span> OrderTotalAmount</span><br><span class="line">    <span class="keyword">FROM</span> Orders</span><br><span class="line">    <span class="keyword">GROUP</span> <span class="keyword">BY</span> UserId</span><br><span class="line">)</span><br><span class="line"><span class="comment">-- Query</span></span><br><span class="line"><span class="keyword">SELECT</span> </span><br><span class="line">U.<span class="operator">*</span>, </span><br><span class="line">OUTC.OrderTotalAmount</span><br><span class="line"><span class="keyword">FROM</span> Users U</span><br><span class="line"><span class="keyword">LEFT</span> <span class="keyword">JOIN</span> Order_User_Total_CTE OUTC <span class="keyword">ON</span> U.Id <span class="operator">=</span> OUTC.UserId</span><br><span class="line">GO</span><br></pre></td></tr></table></figure><p>Now, if I need to create complex reports, summaries or stored procedures , I will use CTE to help me.</p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;If you use queries in SQL, you could involve complex statements that could cause some maintenance or reading problems. You can still do t</summary>
      
    
    
    
    <category term="Database" scheme="https://yuhsiang237.github.io/categories/Database/"/>
    
    <category term="SQL Server" scheme="https://yuhsiang237.github.io/categories/Database/SQL-Server/"/>
    
    
  </entry>
  
  <entry>
    <title>Improve SQL speed by adding index in SQL Server</title>
    <link href="https://yuhsiang237.github.io/2023/02/02/Improve-sql-speed-by-adding-index-in-Sql-Server/"/>
    <id>https://yuhsiang237.github.io/2023/02/02/Improve-sql-speed-by-adding-index-in-Sql-Server/</id>
    <published>2023-02-02T08:00:42.000Z</published>
    <updated>2025-08-11T03:49:08.538Z</updated>
    
    <content type="html"><![CDATA[<p>In the case, I have a simple sql about select, which sorts by date, <code>OrderDate</code>. At the same time, there are <strong>5,000,000 records</strong> in the table, Orders. Due to the large amount of data, the SQL speed becomes very slow, about 6 seconds.</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> TOP <span class="number">1000</span> [Id]</span><br><span class="line">      ,[CreatedOn]</span><br><span class="line">      ,[UpdatedOn]</span><br><span class="line">      ,[IsValid]</span><br><span class="line">      ,[OrderDate]</span><br><span class="line">      ,[OrderNumber]</span><br><span class="line"><span class="keyword">FROM</span> [OrderDB].[dbo].[Orders]</span><br><span class="line"><span class="keyword">ORDER</span> <span class="keyword">BY</span> [OrderDate] <span class="keyword">DESC</span></span><br></pre></td></tr></table></figure><p>After running the sql script, the speed of the result was very slow, about 6 seconds.  </p><img src="/2023/02/02/Improve-sql-speed-by-adding-index-in-Sql-Server/ScriptSpeed.png" class=""><p>So to imporve this problem, I add the index,  <code>NONCLUSTERED INDEX</code>.</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">USE OrderDB;  </span><br><span class="line">GO  </span><br><span class="line"><span class="keyword">CREATE</span> NONCLUSTERED INDEX [IX_Orders_OrderDate]  </span><br><span class="line">    <span class="keyword">ON</span> Orders ([OrderDate]);   </span><br><span class="line">GO </span><br></pre></td></tr></table></figure><p>After running the script, I found the speed has been improved by index, about 0 seconds, and there’re still <strong>5,000,000 records</strong> in the table.</p><img src="/2023/02/02/Improve-sql-speed-by-adding-index-in-Sql-Server/ScriptSpeedImporve.png" class="">]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;In the case, I have a simple sql about select, which sorts by date, &lt;code&gt;OrderDate&lt;/code&gt;. At the same time, there are &lt;strong&gt;5,000,000</summary>
      
    
    
    
    <category term="Database" scheme="https://yuhsiang237.github.io/categories/Database/"/>
    
    <category term="SQL Server" scheme="https://yuhsiang237.github.io/categories/Database/SQL-Server/"/>
    
    
  </entry>
  
  <entry>
    <title>Generate the test data in SQL Server by stored procedure example</title>
    <link href="https://yuhsiang237.github.io/2023/02/02/Loop-in-SQL-Server-stored-procedure-example/"/>
    <id>https://yuhsiang237.github.io/2023/02/02/Loop-in-SQL-Server-stored-procedure-example/</id>
    <published>2023-02-02T06:34:44.000Z</published>
    <updated>2025-08-11T03:49:08.546Z</updated>
    
    <content type="html"><![CDATA[<p>In the case, I want to create a simple script about creating the test data of 100000 records in SQL Server stored procedure.</p><p>Today, I have a table, Orders, and I want to generate the test data to it.</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line">USE [OrderDB]</span><br><span class="line">GO</span><br><span class="line"><span class="comment">/****** Object:  Table [dbo].[Orders]    Script Date: 2/2/2023 3:14:07 PM ******/</span></span><br><span class="line"><span class="keyword">SET</span> ANSI_NULLS <span class="keyword">ON</span></span><br><span class="line">GO</span><br><span class="line"><span class="keyword">SET</span> QUOTED_IDENTIFIER <span class="keyword">ON</span></span><br><span class="line">GO</span><br><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> [dbo].[Orders](</span><br><span class="line">[Id] [<span class="type">int</span>] <span class="keyword">IDENTITY</span>(<span class="number">1</span>,<span class="number">1</span>) <span class="keyword">NOT</span> <span class="keyword">NULL</span>,</span><br><span class="line">[CreatedOn] [datetime] <span class="keyword">NULL</span>,</span><br><span class="line">[UpdatedOn] [datetime] <span class="keyword">NULL</span>,</span><br><span class="line">[IsValid] [bit] <span class="keyword">NULL</span>,</span><br><span class="line">[OrderDate] [datetime] <span class="keyword">NULL</span>,</span><br><span class="line">[OrderNumber] [<span class="type">varchar</span>](<span class="number">50</span>) <span class="keyword">NULL</span>,</span><br><span class="line"> <span class="keyword">CONSTRAINT</span> [PK_Orders] <span class="keyword">PRIMARY</span> KEY CLUSTERED </span><br><span class="line">(</span><br><span class="line">[Id] <span class="keyword">ASC</span></span><br><span class="line">)<span class="keyword">WITH</span> (PAD_INDEX <span class="operator">=</span> OFF, STATISTICS_NORECOMPUTE <span class="operator">=</span> OFF, IGNORE_DUP_KEY <span class="operator">=</span> OFF, ALLOW_ROW_LOCKS <span class="operator">=</span> <span class="keyword">ON</span>, ALLOW_PAGE_LOCKS <span class="operator">=</span> <span class="keyword">ON</span>, OPTIMIZE_FOR_SEQUENTIAL_KEY <span class="operator">=</span> OFF) <span class="keyword">ON</span> [<span class="keyword">PRIMARY</span>]</span><br><span class="line">) <span class="keyword">ON</span> [<span class="keyword">PRIMARY</span>]</span><br><span class="line">GO</span><br></pre></td></tr></table></figure><p>Then I write a simple stored procedure.<br>You can control the data count you want to generate.</p><p>If I want to create the 100000 records, I can do this.</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">use OrderDB</span><br><span class="line">go</span><br><span class="line"><span class="keyword">execute</span> dbo.CreateTestData <span class="number">100000</span></span><br></pre></td></tr></table></figure><p>Below is the complete script, I wrote.</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line">USE [OrderDB]</span><br><span class="line">GO</span><br><span class="line"><span class="comment">/****** Object:  StoredProcedure [dbo].[CreateTestData]    Script Date: 2/2/2023 2:46:33 PM ******/</span></span><br><span class="line"><span class="keyword">SET</span> ANSI_NULLS <span class="keyword">ON</span></span><br><span class="line">GO</span><br><span class="line"><span class="keyword">SET</span> QUOTED_IDENTIFIER <span class="keyword">ON</span></span><br><span class="line">GO</span><br><span class="line"><span class="keyword">ALTER</span> <span class="keyword">PROCEDURE</span> [dbo].[CreateTestData] <span class="variable">@Number</span> <span class="type">int</span></span><br><span class="line"><span class="keyword">AS</span></span><br><span class="line"><span class="keyword">BEGIN</span></span><br><span class="line"><span class="keyword">DECLARE</span></span><br><span class="line"><span class="variable">@Counter</span> <span class="type">int</span> <span class="operator">=</span> <span class="number">1</span></span><br><span class="line">WHILE <span class="variable">@Counter</span> <span class="operator">&lt;=</span> <span class="variable">@Number</span></span><br><span class="line"><span class="keyword">BEGIN</span></span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> Orders (OrderDate,OrderNumber,IsValid,CreatedOn,UpdatedOn) </span><br><span class="line"><span class="keyword">VALUES</span> </span><br><span class="line">(</span><br><span class="line">DATEADD(<span class="keyword">DAY</span>, <span class="built_in">ABS</span>(CHECKSUM(NEWID()) <span class="operator">%</span> <span class="number">3650</span>), <span class="string">&#x27;2000-01-01&#x27;</span>),</span><br><span class="line"><span class="keyword">CONVERT</span>(<span class="type">CHAR</span>(<span class="number">8</span>), FORMAT(GetDate(),<span class="string">&#x27;yyyyMMdd&#x27;</span>)) <span class="operator">+</span> <span class="keyword">right</span>(<span class="string">&#x27;00000000&#x27;</span><span class="operator">+</span><span class="built_in">cast</span>(<span class="variable">@Counter</span> <span class="keyword">as</span> <span class="type">varchar</span>(<span class="number">8</span>)),<span class="number">8</span>),</span><br><span class="line"><span class="number">1</span>,</span><br><span class="line">GETDATE(),</span><br><span class="line">GETDATE()</span><br><span class="line">)</span><br><span class="line"><span class="keyword">SET</span> <span class="variable">@Counter</span><span class="operator">=</span> <span class="variable">@Counter</span> <span class="operator">+</span> <span class="number">1</span></span><br><span class="line"><span class="keyword">END</span></span><br><span class="line"><span class="keyword">END</span></span><br></pre></td></tr></table></figure><p>The stored procedure inserts a random date into <code>OrderDate</code> and a sequence number into <code>OrderNumber</code>.</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">IdCreatedOnUpdatedOnIsValidOrderDateOrderNumber</span><br><span class="line">12023-02-02 15:27:27.7632023-02-02 15:27:27.76312002-11-30 00:00:00.0002023020200000001</span><br><span class="line">22023-02-02 15:27:27.7632023-02-02 15:27:27.76312007-04-29 00:00:00.0002023020200000002</span><br><span class="line">32023-02-02 15:27:27.7632023-02-02 15:27:27.76312002-03-18 00:00:00.0002023020200000003</span><br><span class="line">42023-02-02 15:27:27.7632023-02-02 15:27:27.76312003-03-27 00:00:00.0002023020200000004</span><br><span class="line">52023-02-02 15:27:27.7632023-02-02 15:27:27.76312007-11-07 00:00:00.0002023020200000005</span><br><span class="line">...</span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;In the case, I want to create a simple script about creating the test data of 100000 records in SQL Server stored procedure.&lt;/p&gt;
&lt;p&gt;Today</summary>
      
    
    
    
    <category term="Database" scheme="https://yuhsiang237.github.io/categories/Database/"/>
    
    <category term="SQL Server" scheme="https://yuhsiang237.github.io/categories/Database/SQL-Server/"/>
    
    
  </entry>
  
  <entry>
    <title>簡易後端處理商業邏輯的方式-系統架構篇</title>
    <link href="https://yuhsiang237.github.io/2023/01/30/%E7%B0%A1%E6%98%93%E5%BE%8C%E7%AB%AF%E8%99%95%E7%90%86%E5%95%86%E6%A5%AD%E9%82%8F%E8%BC%AF%E7%9A%84%E6%96%B9%E5%BC%8F-%E7%B3%BB%E7%B5%B1%E6%9E%B6%E6%A7%8B%E7%AF%87/"/>
    <id>https://yuhsiang237.github.io/2023/01/30/%E7%B0%A1%E6%98%93%E5%BE%8C%E7%AB%AF%E8%99%95%E7%90%86%E5%95%86%E6%A5%AD%E9%82%8F%E8%BC%AF%E7%9A%84%E6%96%B9%E5%BC%8F-%E7%B3%BB%E7%B5%B1%E6%9E%B6%E6%A7%8B%E7%AF%87/</id>
    <published>2023-01-30T07:19:31.000Z</published>
    <updated>2025-08-11T03:49:09.046Z</updated>
    
    <content type="html"><![CDATA[<p>在常見的API設計中，透過接收參數到後端服務中，再透過一連串資料操作的邏輯再寫入資料庫或做額外的操作。  </p><p>這時情況會像是下面這樣:</p><img src="/2023/01/30/%E7%B0%A1%E6%98%93%E5%BE%8C%E7%AB%AF%E8%99%95%E7%90%86%E5%95%86%E6%A5%AD%E9%82%8F%E8%BC%AF%E7%9A%84%E6%96%B9%E5%BC%8F-%E7%B3%BB%E7%B5%B1%E6%9E%B6%E6%A7%8B%E7%AF%87/1.png" class=""><p>因為有過多的操作，且這些操作可能在其他的API也會遇到<br>此時，就可以把他們抽出來成:<strong>處理程序(Handler)</strong></p><p>透過Handler，把相同的服務可以用的Method或Function整理在一起。</p><p><strong>舉個例子:</strong><br>有支API叫做建立訂單(CreateOrder)<br>他可能的商業邏輯操作如:建立訂單、修正庫存…等等。<br>那我們就可以把它抽出來叫做OrderHandler，把複雜的商業邏輯封裝在裡面。  </p><p>這時如果要使用到建立訂單時就能透過這Handler去幫我們處理。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">OrderHandler.CreateOrder()</span><br></pre></td></tr></table></figure><p>比如API叫做:</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">/Order/CreateOrder</span><br></pre></td></tr></table></figure><p>那他的Controller裡面就可以這樣寫</p><p>OrderController裡的Action(CreateOrder)就能呼叫OrderHandler.CreateOrder()去協助建立訂單的操作。</p><p>這樣做的好處是能集中管理服務的功能，比較不會遇到全都散在Controller的情況。此外，其他Controller要使用到相同的功能，只要呼叫該Handler，而不用整段複製過去。</p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;在常見的API設計中，透過接收參數到後端服務中，再透過一連串資料操作的邏輯再寫入資料庫或做額外的操作。  &lt;/p&gt;
&lt;p&gt;這時情況會像是下面這樣:&lt;/p&gt;
&lt;img src=&quot;/2023/01/30/%E7%B0%A1%E6%98%93%E5%BE%8C%E7%AB%AF%</summary>
      
    
    
    
    <category term="Topic" scheme="https://yuhsiang237.github.io/categories/Topic/"/>
    
    <category term="SystemStructure" scheme="https://yuhsiang237.github.io/categories/Topic/SystemStructure/"/>
    
    
  </entry>
  
  <entry>
    <title>C#中使用雙問號??取值用法</title>
    <link href="https://yuhsiang237.github.io/2022/12/07/C-%E4%B8%AD%E4%BD%BF%E7%94%A8%E9%9B%99%E5%95%8F%E8%99%9F-%E5%8F%96%E5%80%BC%E7%94%A8%E6%B3%95/"/>
    <id>https://yuhsiang237.github.io/2022/12/07/C-%E4%B8%AD%E4%BD%BF%E7%94%A8%E9%9B%99%E5%95%8F%E8%99%9F-%E5%8F%96%E5%80%BC%E7%94%A8%E6%B3%95/</id>
    <published>2022-12-07T06:55:29.000Z</published>
    <updated>2025-08-11T03:49:08.457Z</updated>
    
    <content type="html"><![CDATA[<p>在C#中可以運用??來判斷前者是否為null，若為null則將後面值遞補上去。<br>如下，因Amount為空，所以會套用後面的default。<br>而default就是decimal的預設值0。<br>因此，在最後會得到amount結果為0。</p><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">namespace</span> <span class="title">Application</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">class</span> <span class="title">OrderDetail</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;summary&gt;</span></span></span><br><span class="line">        <span class="comment"><span class="doctag">///</span> amount</span></span><br><span class="line">        <span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;/summary&gt;</span></span></span><br><span class="line">        <span class="keyword">public</span> <span class="built_in">decimal</span>? Amount;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">internal</span> <span class="keyword">class</span> <span class="title">Program</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="function"><span class="keyword">static</span> <span class="keyword">void</span> <span class="title">Main</span>(<span class="params"><span class="built_in">string</span>[] args</span>)</span></span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">var</span> orderDetail = <span class="keyword">new</span> OrderDetail();</span><br><span class="line">            <span class="keyword">var</span> amount = orderDetail.Amount ?? <span class="literal">default</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;在C#中可以運用??來判斷前者是否為null，若為null則將後面值遞補上去。&lt;br&gt;如下，因Amount為空，所以會套用後面的default。&lt;br&gt;而default就是decimal的預設值0。&lt;br&gt;因此，在最後會得到amount結果為0。&lt;/p&gt;
&lt;figure c</summary>
      
    
    
    
    <category term="Code" scheme="https://yuhsiang237.github.io/categories/Code/"/>
    
    <category term="C#" scheme="https://yuhsiang237.github.io/categories/Code/C/"/>
    
    
  </entry>
  
  <entry>
    <title>在C#中何時使用問號?去拿資料</title>
    <link href="https://yuhsiang237.github.io/2022/12/07/%E5%9C%A8C-%E4%B8%AD%E4%BD%95%E6%99%82%E4%BD%BF%E7%94%A8%E5%95%8F%E8%99%9F-%E5%8E%BB%E6%8B%BF%E8%B3%87%E6%96%99/"/>
    <id>https://yuhsiang237.github.io/2022/12/07/%E5%9C%A8C-%E4%B8%AD%E4%BD%95%E6%99%82%E4%BD%BF%E7%94%A8%E5%95%8F%E8%99%9F-%E5%8E%BB%E6%8B%BF%E8%B3%87%E6%96%99/</id>
    <published>2022-12-07T06:40:20.000Z</published>
    <updated>2025-08-11T03:49:08.953Z</updated>
    
    <content type="html"><![CDATA[<p>在處理C#語言中的物件，常會去拿物件底下子物件的值，常常會遇到錯誤即空物件錯誤，如底下程式碼的amount1變數。因為我們在拿amount1這個值時前面的OrderDetail物件還沒被初始化。<br>這時就要使用問號”?”去取值避免拋錯，如amount2變數。<br>資料在處理時總會拿到髒資料，所以先預判，避免出錯。  </p><p>程式碼如下:</p><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">namespace</span> <span class="title">Application</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;summary&gt;</span></span></span><br><span class="line">    <span class="comment"><span class="doctag">///</span> DataProvider</span></span><br><span class="line">    <span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;/summary&gt;</span></span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">class</span> <span class="title">DataProvider</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;summary&gt;</span></span></span><br><span class="line">        <span class="comment"><span class="doctag">///</span> OrderDetail</span></span><br><span class="line">        <span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;/summary&gt;</span></span></span><br><span class="line">        <span class="keyword">public</span> OrderDetail OrderDetail &#123; <span class="keyword">get</span>; <span class="keyword">set</span>; &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">class</span> <span class="title">OrderDetail</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;summary&gt;</span></span></span><br><span class="line">        <span class="comment"><span class="doctag">///</span> amount</span></span><br><span class="line">        <span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;/summary&gt;</span></span></span><br><span class="line">        <span class="keyword">public</span> <span class="built_in">decimal</span>? Amount;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">internal</span> <span class="keyword">class</span> <span class="title">Program</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="function"><span class="keyword">static</span> <span class="keyword">void</span> <span class="title">Main</span>(<span class="params"><span class="built_in">string</span>[] args</span>)</span></span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">var</span> data = <span class="keyword">new</span> DataProvider();</span><br><span class="line"></span><br><span class="line">            <span class="comment">// amount1: error</span></span><br><span class="line">            <span class="comment">// It will be error. Due to the object, OrderDetail,  is null and doesn&#x27;t initialize.</span></span><br><span class="line">            <span class="comment">// var amount1 = data.OrderDetail.Amount ?? default;</span></span><br><span class="line"></span><br><span class="line">            <span class="comment">// amount2: 0 </span></span><br><span class="line">            <span class="comment">// we can add the symbol &quot;?&quot; after the null object, and it can avoid being an error.</span></span><br><span class="line">            <span class="keyword">var</span> amount2 = data.OrderDetail?.Amount ?? <span class="literal">default</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;在處理C#語言中的物件，常會去拿物件底下子物件的值，常常會遇到錯誤即空物件錯誤，如底下程式碼的amount1變數。因為我們在拿amount1這個值時前面的OrderDetail物件還沒被初始化。&lt;br&gt;這時就要使用問號”?”去取值避免拋錯，如amount2變數。&lt;br&gt;資料</summary>
      
    
    
    
    <category term="Code" scheme="https://yuhsiang237.github.io/categories/Code/"/>
    
    <category term="C#" scheme="https://yuhsiang237.github.io/categories/Code/C/"/>
    
    
  </entry>
  
  <entry>
    <title>Combine your multiple commits into one commit in git</title>
    <link href="https://yuhsiang237.github.io/2022/09/01/Combine-multiple-commits-into-one-commit-in-git/"/>
    <id>https://yuhsiang237.github.io/2022/09/01/Combine-multiple-commits-into-one-commit-in-git/</id>
    <published>2022-09-01T06:58:10.000Z</published>
    <updated>2025-08-11T03:49:08.511Z</updated>
    
    <content type="html"><![CDATA[<p>When you use the git in your project, you could face a problem about how to combine your loose commits into one commit.</p><p>For Examples, I have the commit log like this.</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">First commit </span><br><span class="line">Fix1</span><br><span class="line">Fix2</span><br><span class="line">Adjust wording</span><br></pre></td></tr></table></figure><p>I want to conbine commits of the fix1, fix2 and adjust wording into second commit.<br>It looks great and clear.  </p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">First commit</span><br><span class="line">Second commit</span><br></pre></td></tr></table></figure><p>In order to become this result, we can use the git command, rebase.</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git rebase -i &lt;SHA&gt;</span><br></pre></td></tr></table></figure><ul><li>SHA : It means the base commit. In this case, the SHA is First commit.</li></ul><p>Then you can use the two commands and adjust your commits.</p><ol><li>pick :  use commit</li><li>squash : use commit, but meld into previous commit</li></ol><h3 id="The-git-operation-gif"><a href="#The-git-operation-gif" class="headerlink" title="The git-operation gif"></a>The git-operation gif</h3><img src="/2022/09/01/Combine-multiple-commits-into-one-commit-in-git/rebase.gif" class=""><p>The steps following:</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">1. Use the command &quot;git rebase -i &lt;SHA&gt;&quot;</span><br><span class="line">2. Use pick and squash to adjust your commits</span><br><span class="line">3. Update the combined-commit message</span><br><span class="line">4. Finish</span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;When you use the git in your project, you could face a problem about how to combine your loose commits into one commit.&lt;/p&gt;
&lt;p&gt;For Exampl</summary>
      
    
    
    
    <category term="Code" scheme="https://yuhsiang237.github.io/categories/Code/"/>
    
    <category term="Refactoring" scheme="https://yuhsiang237.github.io/categories/Code/Refactoring/"/>
    
    
  </entry>
  
  <entry>
    <title>The first half of 2022</title>
    <link href="https://yuhsiang237.github.io/2022/07/29/First-half-of-2022/"/>
    <id>https://yuhsiang237.github.io/2022/07/29/First-half-of-2022/</id>
    <published>2022-07-29T06:20:36.000Z</published>
    <updated>2025-08-11T03:49:08.538Z</updated>
    
    <content type="html"><![CDATA[<p>In the first half of 2022, I worked from Kaohsiang to Taipei, and then started a financial-related job, which is loan service, and I write code in C# and Typescript to code everyday.</p><p>However, in my rest time, I prepared for Toeic and learned English online cuz I thought it’s a challenge for me and if I got it over, I could do more thing such as joining a game team, doing business or even playing the video game in full English that made me getting more interesting stuff in my life, but my listen of English still needed to improve.</p><p>In terms of living expenses, I just gained some money and improved my life. I thought the money was not very important, but actually I still needed it to live. I work just to improve my life quality and family environment.</p><p>Finally, I want to share a video. I think it’s fun to explore and study the unknown things, and it can give you a different perspective.</p><p><a href="https://www.youtube.com/watch?v=aRCHzso-ni0">https://www.youtube.com/watch?v=aRCHzso-ni0</a></p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;In the first half of 2022, I worked from Kaohsiang to Taipei, and then started a financial-related job, which is loan service, and I writ</summary>
      
    
    
    
    <category term="Daily Log" scheme="https://yuhsiang237.github.io/categories/Daily-Log/"/>
    
    
  </entry>
  
  <entry>
    <title>Explore New Path What I Wanna Be</title>
    <link href="https://yuhsiang237.github.io/2022/06/28/Explore-New-Path-What-I-Wanna-Be/"/>
    <id>https://yuhsiang237.github.io/2022/06/28/Explore-New-Path-What-I-Wanna-Be/</id>
    <published>2022-06-27T22:11:21.000Z</published>
    <updated>2025-08-11T03:49:08.537Z</updated>
    
    <content type="html"><![CDATA[<p>Since I chose the job of software engineer to work, it has been four years. But sometimes I’m still not satisfied because every day is very regular.</p><h3 id="After-I-Get-Off-Work-And-Back-Home"><a href="#After-I-Get-Off-Work-And-Back-Home" class="headerlink" title="After I Get Off Work And Back Home"></a>After I Get Off Work And Back Home</h3><p>In four years, when I get off work, I will open the video game to rest, such as BloodBorne, Dark Souls III and Monster Hunter: World. I have no idea, but they can let me reflect on myself. Other times I just listen to hip hop music or rap or paint something.</p><p>I usually think about what I should do, but my skills, acknowledgement of technique, or environment always restrict me. My mind told me I couldn’t integrate them. If I can’t solve it, finally, I will just be a technical guy with no soul, which I don’t want to see.</p><h3 id="I-Need-To-Lit-The-Bonfire-Of-Life"><a href="#I-Need-To-Lit-The-Bonfire-Of-Life" class="headerlink" title="I Need To Lit The Bonfire Of Life"></a>I Need To Lit The Bonfire Of Life</h3><p>Now I am starting to integrate my acknowledgement, focus on what I felt, and get out of my way like Dark Souls. I have to explore and fail to go ahead, and don’t be afraid to try those paths.</p><p>I will try the following things:</p><ol><li>Integrate my acknowledgement to explore what I want to do.</li><li>Don’t be afraid to try those paths of failing and risk.</li></ol><p>Finally, I’ve to thanks to the Grammar Checker that corrected my grammar.<br><a href="https://writer.com/grammar-checker/">https://writer.com/grammar-checker/</a></p><p>[中文版]</p><p>自從我選擇軟體工程師工作已經有四年之久，但有時候我仍然覺得不滿足，因為每天似乎都過得很規律。</p><h3 id="當我結束工作回到家"><a href="#當我結束工作回到家" class="headerlink" title="當我結束工作回到家"></a>當我結束工作回到家</h3><p>在這四年間，當我下班了，回到家會打開電視遊樂器來放鬆，像是血源詛咒、暗黑靈魂3、魔物獵人世界。我沒有什麼特別想法，只是它們能夠讓我放鬆反思自己。其他時間則是聽嘻哈音樂或是饒舌，以及畫一些畫。</p><p>我時常在想我該怎麼做，但我的技能、技術認知、環境總是限制我。我內心總告訴我整合不了他們。如果我沒辦法解決掉這問題，最後，我可能就只會成為一個沒靈魂的科技宅，這是我不想見到的。</p><h3 id="我需要點燃生命的篝火"><a href="#我需要點燃生命的篝火" class="headerlink" title="我需要點燃生命的篝火"></a>我需要點燃生命的篝火</h3><p>從現在起我開始整合我的認知，專注在感受上，就像暗黑靈魂，走出一條自己的路。<br>我必須探索、失敗，從中前進，並且不膽怯嘗試那些路。<br>我會嘗試以下的事物:</p><ol><li>整合認知來開拓我想做的事</li><li>不要膽怯嘗試那些失敗、有風險的路</li></ol>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;Since I chose the job of software engineer to work, it has been four years. But sometimes I’m still not satisfied because every day is ve</summary>
      
    
    
    
    <category term="Daily Log" scheme="https://yuhsiang237.github.io/categories/Daily-Log/"/>
    
    
  </entry>
  
  <entry>
    <title>695. Max Area of Island - LeetCode</title>
    <link href="https://yuhsiang237.github.io/2022/06/18/695-Max-Area-of-Island/"/>
    <id>https://yuhsiang237.github.io/2022/06/18/695-Max-Area-of-Island/</id>
    <published>2022-06-17T16:18:45.000Z</published>
    <updated>2025-08-11T03:49:07.607Z</updated>
    
    <content type="html"><![CDATA[<p>In this part, I try to solve the problem of 659 with C#, and this level is medium.</p><h1 id="Problem"><a href="#Problem" class="headerlink" title="Problem"></a>Problem</h1><div class="content__u3I1 question-content__JfgR"><div><p>You are given an <code>m x n</code> binary matrix <code>grid</code>. An island is a group of <code>1</code>'s (representing land) connected <strong>4-directionally</strong> (horizontal or vertical.) You may assume all four edges of the grid are surrounded by water.</p><p>The <strong>area</strong> of an island is the number of cells with a value <code>1</code> in the island.</p><p>Return <em>the maximum <strong>area</strong> of an island in </em><code>grid</code>. If there is no island, return <code>0</code>.</p><p><strong>Example 1:</strong></p><img src="/2022/06/18/695-Max-Area-of-Island/maxarea1-grid.jpg" class=""><pre><strong>Input:</strong> grid = [[0,0,1,0,0,0,0,1,0,0,0,0,0],[0,0,0,0,0,0,0,1,1,1,0,0,0],[0,1,1,0,1,0,0,0,0,0,0,0,0],[0,1,0,0,1,1,0,0,1,0,1,0,0],[0,1,0,0,1,1,0,0,1,1,1,0,0],[0,0,0,0,0,0,0,0,0,0,1,0,0],[0,0,0,0,0,0,0,1,1,1,0,0,0],[0,0,0,0,0,0,0,1,1,0,0,0,0]]<strong>Output:</strong> 6<strong>Explanation:</strong> The answer is not 11, because the island must be connected 4-directionally.</pre><p><strong>Example 2:</strong></p><pre><strong>Input:</strong> grid = [[0,0,0,0,0,0,0,0]]<strong>Output:</strong> 0</pre><p>&nbsp;</p><p><strong>Constraints:</strong></p><ul>    <li><code>m == grid.length</code></li>    <li><code>n == grid[i].length</code></li>    <li><code>1 &lt;= m, n &lt;= 50</code></li>    <li><code>grid[i][j]</code> is either <code>0</code> or <code>1</code>.</li></ul></div></div><h1 id="My-Answer"><a href="#My-Answer" class="headerlink" title="My Answer"></a>My Answer</h1><p>I use the DFS to solve this problem.</p><p>Concept following:</p><ol><li>Loop grid</li><li>Traverse all island and compare the max count of island areas</li><li>Get the max result of island</li></ol><p>I split the program to partial class to help us easy to read, and define an enum of area to mark the traversal.<br>Finally, I use the function TraverseIsland that is an algorithm of DFS to help us traverse the four directions. </p><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">partial</span> <span class="keyword">class</span> <span class="title">Solution</span> &#123;      </span><br><span class="line">    </span><br><span class="line">    <span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;summary&gt;</span></span></span><br><span class="line">    <span class="comment"><span class="doctag">///</span> MaxAreaOfIsland</span></span><br><span class="line">    <span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;/summary&gt;</span></span></span><br><span class="line">    <span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;param name=&quot;grid&quot;&gt;</span>grid<span class="doctag">&lt;/param&gt;</span></span></span><br><span class="line">    <span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;returns&gt;</span>maximum area of an island<span class="doctag">&lt;/returns&gt;</span></span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="built_in">int</span> <span class="title">MaxAreaOfIsland</span>(<span class="params"><span class="built_in">int</span>[][] grid</span>)</span> &#123;</span><br><span class="line">        <span class="keyword">var</span> maxAreaOfIsland = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">var</span> i=<span class="number">0</span>;i&lt;grid.Length;i++)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">for</span>(<span class="keyword">var</span> j=<span class="number">0</span>;j&lt;grid[<span class="number">0</span>].Length;j++)</span><br><span class="line">            &#123;</span><br><span class="line">                <span class="keyword">if</span>(IsIsland(grid[i][j]))</span><br><span class="line">                &#123;</span><br><span class="line">                    <span class="keyword">var</span> islandAreas = <span class="keyword">new</span> List&lt;(<span class="built_in">int</span>,<span class="built_in">int</span>)&gt;();</span><br><span class="line">                    TraverseIsland(islandAreas,grid,i,j);</span><br><span class="line">                    maxAreaOfIsland = Math.Max(islandAreas.Count,maxAreaOfIsland);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> maxAreaOfIsland;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment"><span class="doctag">///</span></span></span><br><span class="line"><span class="comment"><span class="doctag">///</span> private method &amp; variant</span></span><br><span class="line"><span class="comment"><span class="doctag">///</span></span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">partial</span> <span class="keyword">class</span> <span class="title">Solution</span> &#123;      </span><br><span class="line">    </span><br><span class="line">    <span class="keyword">private</span> <span class="built_in">enum</span> AreaEnum </span><br><span class="line">    &#123;</span><br><span class="line">      None = <span class="number">0</span>,</span><br><span class="line">      Island = <span class="number">1</span>,</span><br><span class="line">      HasBeenTraverse = <span class="number">2</span>,</span><br><span class="line">    &#125;;</span><br><span class="line"></span><br><span class="line">    <span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;summary&gt;</span></span></span><br><span class="line">    <span class="comment"><span class="doctag">///</span> Check the location that is island</span></span><br><span class="line">    <span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;/summary&gt;</span></span></span><br><span class="line">    <span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;param name=&quot;gridValue&quot;&gt;</span>value of grid<span class="doctag">&lt;/param&gt;</span></span></span><br><span class="line">    <span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;returns&gt;</span>bool<span class="doctag">&lt;/returns&gt;</span></span></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="built_in">bool</span> <span class="title">IsIsland</span>(<span class="params"><span class="built_in">int</span> gridValue</span>)</span></span><br><span class="line">        =&gt; gridValue == (<span class="built_in">int</span>)AreaEnum.Island;</span><br><span class="line"></span><br><span class="line">    <span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;summary&gt;</span></span></span><br><span class="line">    <span class="comment"><span class="doctag">///</span> Mark the traversal to avoid infinite loops</span></span><br><span class="line">    <span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;/summary&gt;</span></span></span><br><span class="line">    <span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;param name=&quot;grid&quot;&gt;</span>grid<span class="doctag">&lt;/param&gt;</span></span></span><br><span class="line">    <span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;param name=&quot;i&quot;&gt;</span>i of grid<span class="doctag">&lt;/param&gt;</span></span></span><br><span class="line">    <span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;param name=&quot;j&quot;&gt;</span>j of grid<span class="doctag">&lt;/param&gt;</span></span></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">MarkTraversal</span>(<span class="params"><span class="built_in">int</span>[][] grid,<span class="built_in">int</span> i,<span class="built_in">int</span> j</span>)</span></span><br><span class="line">        =&gt; grid[i][j] = (<span class="built_in">int</span>)AreaEnum.HasBeenTraverse;</span><br><span class="line">    </span><br><span class="line">    <span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;summary&gt;</span></span></span><br><span class="line">    <span class="comment"><span class="doctag">///</span> Traverse Island</span></span><br><span class="line">    <span class="comment"><span class="doctag">///</span> Traverse the grid 4-directionally</span></span><br><span class="line">    <span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;/summary&gt;</span></span></span><br><span class="line">    <span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;param name=&quot;islandAreas&quot;&gt;</span>areas of the island<span class="doctag">&lt;/param&gt;</span></span></span><br><span class="line">    <span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;param name=&quot;grid&quot;&gt;</span>grid object<span class="doctag">&lt;/param&gt;</span></span></span><br><span class="line">    <span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;param name=&quot;i&quot;&gt;</span>i of grid<span class="doctag">&lt;/param&gt;</span></span></span><br><span class="line">    <span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;param name=&quot;j&quot;&gt;</span>j of grid<span class="doctag">&lt;/param&gt;</span></span></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">TraverseIsland</span> (<span class="params"></span></span></span><br><span class="line"><span class="params"><span class="function">        List&lt;(<span class="built_in">int</span>,<span class="built_in">int</span></span>)&gt; islandAreas, </span></span><br><span class="line"><span class="function">        <span class="built_in">int</span>[][] grid,</span></span><br><span class="line"><span class="function">        <span class="built_in">int</span> i, </span></span><br><span class="line"><span class="function">        <span class="built_in">int</span> j)</span></span><br><span class="line">    &#123;</span><br><span class="line">        islandAreas.Add((i,j));</span><br><span class="line">        MarkTraversal(grid,i,j);</span><br><span class="line">        </span><br><span class="line">        <span class="comment">// top</span></span><br><span class="line">        <span class="keyword">if</span>(i<span class="number">-1</span> &gt;= <span class="number">0</span> &amp;&amp; IsIsland(grid[i<span class="number">-1</span>][j])) </span><br><span class="line">            TraverseIsland(islandAreas,grid,i<span class="number">-1</span>,j);</span><br><span class="line">        <span class="comment">// bottom</span></span><br><span class="line">        <span class="keyword">if</span>(i+<span class="number">1</span> &lt; grid.Length &amp;&amp; IsIsland(grid[i+<span class="number">1</span>][j]))</span><br><span class="line">            TraverseIsland(islandAreas,grid,i+<span class="number">1</span>,j);</span><br><span class="line">        <span class="comment">// left</span></span><br><span class="line">        <span class="keyword">if</span>(j<span class="number">-1</span> &gt;= <span class="number">0</span> &amp;&amp; IsIsland(grid[i][j<span class="number">-1</span>])) </span><br><span class="line">            TraverseIsland(islandAreas,grid,i,j<span class="number">-1</span>);</span><br><span class="line">        <span class="comment">// right</span></span><br><span class="line">        <span class="keyword">if</span>(j+<span class="number">1</span> &lt; grid[<span class="number">0</span>].Length &amp;&amp; IsIsland(grid[i][j+<span class="number">1</span>]))</span><br><span class="line">            TraverseIsland(islandAreas,grid,i,j+<span class="number">1</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>Run Result:</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">Runtime: 98 ms, faster than 93.42% of C# online submissions for Max Area of Island.</span><br><span class="line">Memory Usage: 43.9 MB, less than 6.70% of C# online submissions for Max Area of Island.</span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;In this part, I try to solve the problem of 659 with C#, and this level is medium.&lt;/p&gt;
&lt;h1 id=&quot;Problem&quot;&gt;&lt;a href=&quot;#Problem&quot; class=&quot;headerl</summary>
      
    
    
    
    <category term="Code" scheme="https://yuhsiang237.github.io/categories/Code/"/>
    
    <category term="C#" scheme="https://yuhsiang237.github.io/categories/Code/C/"/>
    
    <category term="Topic" scheme="https://yuhsiang237.github.io/categories/Topic/"/>
    
    <category term="LeetCode" scheme="https://yuhsiang237.github.io/categories/Topic/LeetCode/"/>
    
    
  </entry>
  
  <entry>
    <title>C# create the non-reference object (Deep Clone)</title>
    <link href="https://yuhsiang237.github.io/2022/06/08/C-create-the-non-reference-object-Deep-Clone/"/>
    <id>https://yuhsiang237.github.io/2022/06/08/C-create-the-non-reference-object-Deep-Clone/</id>
    <published>2022-06-08T02:22:05.000Z</published>
    <updated>2025-08-11T03:49:08.456Z</updated>
    
    <content type="html"><![CDATA[<p>In my work, I usually have a problem about how to create a non-reference object in C#. So today I want to solve it with a simple way that use the serialization and deserialization of JSON.</p><h3 id="Code"><a href="#Code" class="headerlink" title="Code"></a>Code</h3><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">using</span> System;</span><br><span class="line"><span class="keyword">using</span> System.Text.Json;</span><br><span class="line"></span><br><span class="line"><span class="keyword">namespace</span> <span class="title">NonReferenceObj</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">internal</span> <span class="keyword">class</span> <span class="title">Program</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;summary&gt;</span></span></span><br><span class="line">        <span class="comment"><span class="doctag">///</span> Order</span></span><br><span class="line">        <span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;/summary&gt;</span></span></span><br><span class="line">        <span class="keyword">public</span> <span class="keyword">class</span> <span class="title">Order</span></span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">public</span> <span class="built_in">int</span> Seq &#123; <span class="keyword">get</span>; <span class="keyword">set</span>; &#125;</span><br><span class="line">            <span class="keyword">public</span> <span class="built_in">string</span> No &#123; <span class="keyword">get</span>; <span class="keyword">set</span>; &#125;</span><br><span class="line">            <span class="keyword">public</span> <span class="built_in">decimal</span> Amount &#123; <span class="keyword">get</span>; <span class="keyword">set</span>; &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;summary&gt;</span></span></span><br><span class="line">        <span class="comment"><span class="doctag">///</span> Util</span></span><br><span class="line">        <span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;/summary&gt;</span></span></span><br><span class="line">        <span class="keyword">public</span> <span class="keyword">class</span> <span class="title">Util</span></span><br><span class="line">        &#123;</span><br><span class="line">            <span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;summary&gt;</span></span></span><br><span class="line">            <span class="comment"><span class="doctag">///</span> Deep Clone</span></span><br><span class="line">            <span class="comment"><span class="doctag">///</span> Copy a non-reference object</span></span><br><span class="line">            <span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;/summary&gt;</span></span></span><br><span class="line">            <span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;typeparam name=&quot;T&quot;&gt;</span>T<span class="doctag">&lt;/typeparam&gt;</span></span></span><br><span class="line">            <span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;param name=&quot;obj&quot;&gt;</span>obj<span class="doctag">&lt;/param&gt;</span></span></span><br><span class="line">            <span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;returns&gt;</span><span class="doctag">&lt;/returns&gt;</span></span></span><br><span class="line">            <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> T <span class="title">DeepClone</span>&lt;<span class="title">T</span>&gt;(<span class="params">T obj</span>)</span></span><br><span class="line">            =&gt; JsonSerializer.Deserialize&lt;T&gt;(JsonSerializer.Serialize(obj));</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="function"><span class="keyword">static</span> <span class="keyword">void</span> <span class="title">Main</span>(<span class="params"></span>)</span></span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">var</span> order = <span class="keyword">new</span> Order</span><br><span class="line">            &#123;</span><br><span class="line">                Seq = <span class="number">1</span>,</span><br><span class="line">                No = <span class="string">&quot;20220608&quot;</span>,</span><br><span class="line">                Amount = <span class="number">100</span>,</span><br><span class="line">            &#125;;</span><br><span class="line"></span><br><span class="line">            <span class="keyword">var</span> copy = Util.DeepClone(order);</span><br><span class="line"></span><br><span class="line">            <span class="comment">// Check the reference of object </span></span><br><span class="line">            Console.WriteLine(<span class="string">$&quot;Check the reference of object: <span class="subst">&#123;<span class="built_in">object</span>.ReferenceEquals(order, copy)&#125;</span>&quot;</span>);</span><br><span class="line">            <span class="comment">// Check the equal of value  </span></span><br><span class="line">            Console.WriteLine(<span class="string">$&quot;Check the equal of value: <span class="subst">&#123;order.No == copy.No &amp;&amp; order.Seq == copy.Seq &amp;&amp; order.Amount == copy.Amount&#125;</span>&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>Finally, we got the output below:</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">Check the reference of object: False</span><br><span class="line">Check the equal of value: True</span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;In my work, I usually have a problem about how to create a non-reference object in C#. So today I want to solve it with a simple way that</summary>
      
    
    
    
    <category term="Code" scheme="https://yuhsiang237.github.io/categories/Code/"/>
    
    <category term="C#" scheme="https://yuhsiang237.github.io/categories/Code/C/"/>
    
    
  </entry>
  
  <entry>
    <title>Refactor the code - function</title>
    <link href="https://yuhsiang237.github.io/2022/06/07/Refactor-the-code-1/"/>
    <id>https://yuhsiang237.github.io/2022/06/07/Refactor-the-code-1/</id>
    <published>2022-06-07T06:34:00.000Z</published>
    <updated>2025-08-11T03:49:08.553Z</updated>
    
    <content type="html"><![CDATA[<p>First, we find a section of code that contains different operations, such as initialization and print. We can try to refactor that extracts them into functions.</p><p><strong>Concepts</strong></p><ol><li>The process of restructuring code, while not changing its original functionality.</li><li>Easier to understand</li><li>Cheaper to modify</li></ol><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">using</span> System;</span><br><span class="line"><span class="keyword">using</span> System.Collections.Generic;</span><br><span class="line"></span><br><span class="line"><span class="keyword">namespace</span> <span class="title">refactor01</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">internal</span> <span class="keyword">class</span> <span class="title">Program</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="function"><span class="keyword">static</span> <span class="keyword">void</span> <span class="title">Main</span>(<span class="params"><span class="built_in">string</span>[] args</span>)</span></span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">var</span> numbers = <span class="keyword">new</span> List&lt;<span class="built_in">string</span>&gt;();</span><br><span class="line">            <span class="keyword">for</span>(<span class="keyword">var</span> i = <span class="number">0</span>; i &lt; <span class="number">10</span>; i++)</span><br><span class="line">            &#123;</span><br><span class="line">                numbers.Add(i.ToString());</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">foreach</span> (<span class="keyword">var</span> item <span class="keyword">in</span> numbers)</span><br><span class="line">            &#123;</span><br><span class="line">                Console.Write(item);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>Now, We extract the different operations into functions, and each function just do one thing. We can more easily control something we want to do.</p><ol><li>Extract the different operations into functions.</li><li>Add the summary.</li><li>Remove the unused parameter.</li></ol><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">using</span> System;</span><br><span class="line"><span class="keyword">using</span> System.Collections.Generic;</span><br><span class="line"></span><br><span class="line"><span class="keyword">namespace</span> <span class="title">refactor01</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">internal</span> <span class="keyword">class</span> <span class="title">Program</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="function"><span class="keyword">static</span> <span class="keyword">void</span> <span class="title">Main</span>(<span class="params"></span>)</span></span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">var</span> numbers = <span class="keyword">new</span> List&lt;<span class="built_in">string</span>&gt;();</span><br><span class="line">            initNumbers(numbers);</span><br><span class="line">            printNumbers(numbers);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;summary&gt;</span></span></span><br><span class="line">        <span class="comment"><span class="doctag">///</span> init the numbers</span></span><br><span class="line">        <span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;/summary&gt;</span></span></span><br><span class="line">        <span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;param name=&quot;numbers&quot;&gt;</span>list of numbers<span class="doctag">&lt;/param&gt;</span></span></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">initNumbers</span>(<span class="params">List&lt;<span class="built_in">string</span>&gt; numbers</span>)</span></span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">0</span>; i &lt; <span class="number">10</span>; i++)</span><br><span class="line">            &#123;</span><br><span class="line">                numbers.Add(i.ToString());</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;summary&gt;</span></span></span><br><span class="line">        <span class="comment"><span class="doctag">///</span> print the numbers</span></span><br><span class="line">        <span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;/summary&gt;</span></span></span><br><span class="line">        <span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;param name=&quot;numbers&quot;&gt;</span>list of numbers<span class="doctag">&lt;/param&gt;</span></span></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">printNumbers</span>(<span class="params">List&lt;<span class="built_in">string</span>&gt; numbers</span>)</span></span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">foreach</span> (<span class="keyword">var</span> item <span class="keyword">in</span> numbers)</span><br><span class="line">            &#123;</span><br><span class="line">                Console.Write(item);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="In-conclusion"><a href="#In-conclusion" class="headerlink" title="In conclusion"></a>In conclusion</h3><p>Finally, we did it that finished the refactoring and just made it easy to maintain and read.</p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;First, we find a section of code that contains different operations, such as initialization and print. We can try to refactor that extrac</summary>
      
    
    
    
    <category term="Code" scheme="https://yuhsiang237.github.io/categories/Code/"/>
    
    <category term="C#" scheme="https://yuhsiang237.github.io/categories/Code/C/"/>
    
    <category term="Refactoring" scheme="https://yuhsiang237.github.io/categories/Code/Refactoring/"/>
    
    
  </entry>
  
</feed>
